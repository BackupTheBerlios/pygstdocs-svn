<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">


<refentry id="class-gsttask">
    <refnamediv>
        <refname>gst.Task</refname>
        <refpurpose>Abstraction of GStreamer streaming threads.</refpurpose>
    </refnamediv>


<!-- *************************** -->
<!-- BEGIN OF MyClass' SYNOPSIS -->
<!-- *************************** -->

<refsect1>
    <title>Synopsis</title>

    <classsynopsis language="python">
        <ooclass><classname>gst.Task</classname></ooclass>
        <ooclass><classname><link linkend="class-gstobject">gst.Object</link></classname></ooclass>

    <constructorsynopsis language="python">
        <methodname><link linkend="constructor-gsttask">gst.Task</link></methodname>
        <methodparam></methodparam>
    </constructorsynopsis>
    
    <methodsynopsis language="python">
        <methodname><link linkend="method-gsttask--get_state">get_state</link></methodname>
    </methodsynopsis>
    
    <methodsynopsis language="python">
        <methodname><link linkend="method-gsttask--join">join</link></methodname>
    </methodsynopsis>
  
    <methodsynopsis language="python">
        <methodname><link linkend="method-gsttask--pause">pause</link></methodname>
    </methodsynopsis>
    
     <methodsynopsis language="python">
        <methodname><link linkend="method-gsttask--start">start</link></methodname>
    </methodsynopsis>
    
     <methodsynopsis language="python">
        <methodname><link linkend="method-gsttask--stop">stop</link></methodname>
    </methodsynopsis>
</classsynopsis>

</refsect1>

 
<!-- ************************** -->
<!-- BEGIN OF MyClass' ANCESTRY -->
<!-- ************************** -->

<refsect1>
    <title>Ancestry</title>

<synopsis>+-- <ulink url="http://www.pygtk.org/pygtk2reference/class-gobject.html">gobject.GObject</ulink>
    +-- <link linkend="class-gstobject">gst.Object</link>
        +-- <link linkend="class-gsttask">gst.Task</link>
</synopsis>
</refsect1>


<!-- ***************************** -->
<!-- BEGIN OF MyClass' DESCRIPTION -->
<!-- ***************************** -->

<refsect1 id="description-gsttask">
    <title>Description</title>

    <para>
        A gst.Task is used by gst.Element and gst.Pad to provide the data passing threads in a gst.Pipeline.
    </para>
    <para>
        A gst.Pad will typically start a gst.Task to push or pull data to/from the peer pads. Most source 
        elements start a gst.Task to push data. In some cases a demuxer element can start a gst.Task to pull 
        data from a peer element. This is typically done when the demuxer can perform random access on the 
        upstream peer element for improved performance.
    </para>
    <para>
        Although convenience functions exist on gst.Pad to start/pause/stop tasks, it might sometimes be 
        needed to create a gst.Task manually if it is not related to a gst.Pad.
    </para>
     <para>
        Before the gst.Task can be run, it needs a gst.StaticRecMutex that can be set with set_lock().
    </para>
     <para>
        The task can be started, paused and stopped with start(), pause() and 
        stop() respectively.
    </para>
     <para>
        A gst.Task will repeadedly call the gst.TaskFunction with the user data that was provided when 
        creating the task with create(). Before calling the function it will acquire the provided 
        lock.
    </para>
     <para>
        Stopping a task with stop() will not immediatly make sure the task is not running 
        anymore. Use join() to make sure the task is completely stopped and the thread is stopped.
    </para>
</refsect1>


<!-- ******************************** -->
<!-- BEGIN OF MyClass' CONSTRUCTOR -->
<!-- ******************************** -->

<refsect1 id="constructor-gsttask">
    <title>Constructor</title>
    
    <programlisting><constructorsynopsis language="python">
            <methodname>gst.Task</methodname>
        </constructorsynopsis></programlisting>
    
    <para>
        Creates a new gst.Task.
    </para>
</refsect1>


<!-- ************************* -->
<!-- BEGIN OF MyClass' METHODS -->
<!-- ************************* -->

<refsect1>
    <title>Methods</title>

    <refsect2 id="method-gsttask--get_state">
        <title>gst.Task.get_state</title>
        <programlisting><methodsynopsis language="python">
            <methodname>get_state</methodname>
        </methodsynopsis></programlisting>
      
        <variablelist>
           <varlistentry>
                <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara>The gst.TaskState of the task. MT safe.</simpara></listitem>
            </varlistentry>
        </variablelist>

        <para>
            The <methodname>get_state</methodname>() method gets the current state of the task.
        </para>
    </refsect2>
    
    <refsect2 id="method-gsttask--join">
        <title>gst.Task.join</title>
        <programlisting><methodsynopsis language="python">
            <methodname>join</methodname>
        </methodsynopsis></programlisting>
      
        <variablelist>
           <varlistentry>
                <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara> True if the task could be joined. MT safe.</simpara></listitem>
            </varlistentry>
        </variablelist>

        <para>
            The <methodname>join</methodname>() method joins task. After this call, it is safe to unref the 
            task and clean up the lock set with set_lock().
            The task will automatically be stopped with this call.
            This function cannot be called from within a task function as this would cause a deadlock. 
            The function will detect this and print a g_warning.
        </para>
    </refsect2>
    
    <refsect2 id="method-gsttask--pause">
        <title>gst.Task.pause</title>
        <programlisting><methodsynopsis language="python">
            <methodname>pause</methodname>
        </methodsynopsis></programlisting>
      
        <variablelist>
           <varlistentry>
                <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara> True if the task could be paused. MT safe.</simpara></listitem>
            </varlistentry>
        </variablelist>

        <para>
            The <methodname>pause</methodname>() method pauses task. This method can also be called on 
            a task in the stopped state, in which case a thread will be started and will remain in the
             paused state. This function does not wait for the task to complete the paused state.
        </para>
    </refsect2>
    
    <refsect2 id="method-gsttask--start">
        <title>gst.Task.start</title>
        <programlisting><methodsynopsis language="python">
            <methodname>start</methodname>
        </methodsynopsis></programlisting>
      
        <variablelist>
           <varlistentry>
                <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara> True if the task could be started. MT safe.</simpara></listitem>
            </varlistentry>
        </variablelist>

        <para>
            The <methodname>start</methodname>() method starts task.
        </para>
    </refsect2>
    
    <refsect2 id="method-gsttask--stop">
        <title>gst.Task.stop</title>
        <programlisting><methodsynopsis language="python">
            <methodname>stop</methodname>
        </methodsynopsis></programlisting>
      
        <variablelist>
           <varlistentry>
                <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara> True if the task could be stopped. MT safe.</simpara></listitem>
            </varlistentry>
        </variablelist>

        <para>
            The <methodname>stop</methodname>() method stops task.
        </para>
    </refsect2>
 
</refsect1>
    
 
</refentry>



