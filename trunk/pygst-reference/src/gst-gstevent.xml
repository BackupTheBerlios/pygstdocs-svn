<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="class-gstevent">
    <refnamediv>
        <refname>gst.Event</refname>
        <refpurpose>Structure describing events that are passed up and down a pipeline.</refpurpose>
    </refnamediv>

<!-- *************************** -->
<!-- BEGIN OF GSTEVENT SYNOPSIS -->
<!-- *************************** -->

<refsect1>
    <title>Synopsis</title>

    <classsynopsis language="python">
        <ooclass><classname>gst.Event</classname></ooclass>
        <ooclass><classname><link linkend="class-gstminiobject">gst.MiniObject</link></classname></ooclass>

    <constructorsynopsis language="python">
        <methodname><link linkend="constructor-gstevent">gst.Event</link></methodname>
        <methodparam></methodparam>
    </constructorsynopsis>
    
    <methodsynopsis language="python">
        <methodname><link linkend="method-gstevent--get-structure">get_structure</link></methodname>
        <methodparam></methodparam>
    </methodsynopsis>
  
    <methodsynopsis language="python">
        <methodname><link linkend="method-gstevent--parse-buffer-size">parse_buffer_size</link></methodname>
        <methodparam><parameter role="keyword">format</parameter></methodparam>
        <methodparam><parameter role="keyword">minsize</parameter></methodparam>
        <methodparam><parameter role="keyword">maxsize</parameter></methodparam>
        <methodparam><parameter role="keyword">async</parameter></methodparam>
    </methodsynopsis>
    
    <methodsynopsis language="python">
        <methodname><link linkend="method-gstevent--parse-new-segment">parse_new_segment</link></methodname>
        <methodparam><parameter role="keyword">update</parameter></methodparam>
        <methodparam><parameter role="keyword">rate</parameter></methodparam>
        <methodparam><parameter role="keyword">format</parameter></methodparam>
        <methodparam><parameter role="keyword">start</parameter></methodparam>
        <methodparam><parameter role="keyword">stop</parameter></methodparam>
        <methodparam><parameter role="keyword">position</parameter></methodparam>
    </methodsynopsis>
    
    <methodsynopsis language="python">
        <methodname><link linkend="method-gstevent--parse-qos">parse_qos</link></methodname>
        <methodparam><parameter role="keyword">proportion</parameter></methodparam>
        <methodparam><parameter role="keyword">diff</parameter></methodparam>
        <methodparam><parameter role="keyword">timestamp</parameter></methodparam>
    </methodsynopsis>
    
    <methodsynopsis language="python">
        <methodname><link linkend="method-gstevent--parse-seek">parse_seek</link></methodname>
        <methodparam><parameter role="keyword">rate</parameter></methodparam>
        <methodparam><parameter role="keyword">format</parameter></methodparam>
        <methodparam><parameter role="keyword">flags</parameter></methodparam>
        <methodparam><parameter role="keyword">cur_type</parameter></methodparam>
        <methodparam><parameter role="keyword">cur</parameter></methodparam>
        <methodparam><parameter role="keyword">stop_type</parameter></methodparam>
        <methodparam><parameter role="keyword">stop</parameter></methodparam>
    </methodsynopsis>
    
    <methodsynopsis language="python">
        <methodname><link linkend="method-gstevent--parse-tags">parse_tags</link></methodname>
        <methodparam><parameter role="keyword">taglist</parameter></methodparam>
    </methodsynopsis>
</classsynopsis>

<programlisting>
    <emphasis role="bold">Functions</emphasis>
    
<methodsynopsis language="python"><methodname><link linkend="function-gstevent--event-new-buffer-size">gst.event_new_buffer_size</link></methodname>
<methodparam><parameter role="keyword">format</parameter></methodparam>
<methodparam><parameter role="keyword">minsize</parameter></methodparam>
<methodparam><parameter role="keyword">maxsize</parameter></methodparam>
<methodparam><parameter role="keyword">async</parameter></methodparam></methodsynopsis><methodsynopsis language="python">
<methodname><link linkend="function-gstevent--event-new-custom">gst.event_new_custom</link></methodname>
<methodparam><parameter role="keyword">type</parameter></methodparam>
<methodparam><parameter role="keyword">structure</parameter></methodparam></methodsynopsis><methodsynopsis language="python">
<methodname><link linkend="function-gstevent--event-new-eos">gst.event_new_eos</link></methodname>
<methodparam></methodparam></methodsynopsis><methodsynopsis language="python">
<methodname><link linkend="function-gstevent--event-new-flush-start">gst.event_new_flush_start</link></methodname>
<methodparam></methodparam></methodsynopsis><methodsynopsis language="python">
<methodname><link linkend="function-gstevent--event-new-flush-stop">gst.event_new_flush_stop</link></methodname>
<methodparam></methodparam></methodsynopsis><methodsynopsis language="python">
<methodname><link linkend="function-gstevent--event-new-navigation">gst.event_new_navigation</link></methodname>
<methodparam><parameter role="keyword">structure</parameter></methodparam></methodsynopsis><methodsynopsis language="python">
<methodname><link linkend="function-gstevent--event-new-new-segment">gst.event_new_new_segment</link></methodname>
<methodparam><parameter role="keyword">update</parameter></methodparam>
<methodparam><parameter role="keyword">rate</parameter></methodparam>
<methodparam><parameter role="keyword">format</parameter></methodparam>
<methodparam><parameter role="keyword">start</parameter></methodparam>
<methodparam><parameter role="keyword">stop</parameter></methodparam>
<methodparam><parameter role="keyword">position</parameter></methodparam></methodsynopsis><methodsynopsis language="python">
<methodname><link linkend="function-gstevent--event-new-qos">gst.event_new_qos</link></methodname>
<methodparam><parameter role="keyword">proportion</parameter></methodparam>
<methodparam><parameter role="keyword">diff</parameter></methodparam>
<methodparam><parameter role="keyword">timestamp</parameter></methodparam></methodsynopsis><methodsynopsis language="python">
<methodname><link linkend="function-gstevent--event-new-seek">gst.event_new_seek</link></methodname>
<methodparam><parameter role="keyword">rate</parameter></methodparam>
<methodparam><parameter role="keyword">format</parameter></methodparam>
<methodparam><parameter role="keyword">flags</parameter></methodparam>
<methodparam><parameter role="keyword">cur_type</parameter></methodparam>
<methodparam><parameter role="keyword">cur</parameter></methodparam>
<methodparam><parameter role="keyword">stop_type</parameter></methodparam>
<methodparam><parameter role="keyword">stop</parameter></methodparam></methodsynopsis><methodsynopsis language="python">
<methodname><link linkend="function-gstevent--event-new-tags">gst.event_new_tags</link></methodname>
<methodparam><parameter role="keyword">taglist</parameter></methodparam></methodsynopsis>
</programlisting>
</refsect1>

<!-- ************************** -->
<!-- BEGIN OF GSTEVENT ANCESTRY -->
<!-- ************************** -->

<refsect1>
    <title>Ancestry</title>

<synopsis>+-- <link linkend="class-gstminiobject">gst.MiniObject</link>
    +-- <link linkend="class-gstevent">gst.Event</link>
</synopsis>
</refsect1>

<!-- ***************************** -->
<!-- BEGIN OF GSTEVENT DESCRIPTION -->
<!-- ***************************** -->

<refsect1 id="description-gstevent">
    <title>Description</title>

    <para>
        The event classes are used to construct and query events.
    </para>
    <para>
        Events are usually created with gst.event_new_*() which takes the extra event parameters as arguments. 
        Events can be parsed with their respective gst.Event.parse_*() methods.
    </para>
    <para>
        Events are passed between elements in parallel to the data stream. Some events are serialized with buffers, others are not. 
        Some events only travel downstream, others only upstream. Some events can travel both upstream and downstream.
    </para>
    <para>
        The events are used to signal special conditions in the datastream such as EOS or the start of a new segment. 
        Events are also used to flush the pipeline of any pending data.
    </para>
    <para>
        Most of the event API is used inside plugins. The application usually only constructs and uses the seek event API when it 
        wants to perform a seek in the pipeline.
    </para>
    <para>
        <methodname><link linkend="function-gstevent--event-new-seek">gst.event_new_buffer_seek()</link></methodname> 
        is usually used to create a seek event and it takes the needed parameters for a seek event.
    </para>
</refsect1>

<!-- *************************** -->
<!-- BEGIN OF GSTEVENT CONSTANTS -->
<!-- *************************** -->

<refsect1>
    <title>Constants</title>
    
    <blockquote role="properties">
        <informaltable pgwide="1" frame="none">
            <tgroup cols="2">
                <colspec column="1" colwidth="1in"/>
                <colspec column="1" colwidth="1in"/>
                <tbody>
                    <row valign="top">
                        <entry>gst.EVENT_UNKNOWN</entry>
                        <entry>Unknown event.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_FLUSH_START</entry>
                        <entry>Start a flush operation.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_FLUSH_STOP</entry>
                        <entry>Stop a flush operation.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_EOS</entry>
                        <entry>End-Of-Stream. No more data is to be expected to follow without a NEWSEGMENT event.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_NEWSEGMENT</entry>
                        <entry>A new media segment follows in the dataflow.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_TAG</entry>
                        <entry>A new set of metadata tags has been found in the stream.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_BUFFERSIZE</entry>
                        <entry>Notification of buffering requirements.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_QOS</entry>
                        <entry>A quality message. Used to indicate to upstream elements that the downstream elements are 
                            being starved of or flooded with data.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_SEEK</entry>
                        <entry>A request for a new playback position and rate.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_NAVIGATION</entry>
                        <entry>Navigation events are usually used for communicating user requests, 
                            such as mouse or keyboard movements, to upstream elements.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_CUSTOM_UPSTREAM</entry>
                        <entry>Upstream custom event.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_CUSTOM_DOWNSTREAM</entry>
                        <entry>Downstream custom event that travels in the data flow.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_CUSTOM_DOWNSTREAM_OOB</entry>
                        <entry>Custom out-of-band downstream event.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_CUSTOM_BOTH</entry>
                        <entry>Custom upstream or downstream event. In-band when travelling downstream.</entry>
                    </row>
                    <row valign="top">
                        <entry>gst.EVENT_CUSTOM_BOTH_OOB</entry>
                        <entry>Custom upstream or downstream out-of-band event.</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </blockquote>
</refsect1>

<!-- ************************* -->
<!-- BEGIN OF GSTEVENT METHODS -->
<!-- ************************* -->

<refsect1>
    <title>Methods</title>

    <refsect2 id="method-gstevent--get-structure">
        <title>gst.Event.get_structure</title>
        <programlisting><methodsynopsis language="python">
            <methodname>get_structure</methodname>
            <methodparam></methodparam>
        </methodsynopsis></programlisting>
    
        <variablelist>
            <varlistentry>
                <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara> The structure of the event..</simpara></listitem>
            </varlistentry>
        </variablelist>
      
        <para>
            The <methodname>get_structure</methodname>() method accesses the structure of the event.
        </para>
    </refsect2>

    <refsect2 id="method-gstevent--parse-buffer-size">
        <title>gst.Event.parse_buffer_size</title>
        <programlisting><methodsynopsis language="python">
            <methodname>parse_buffer_size</methodname>
            <methodparam><parameter role="keyword">format</parameter></methodparam>
            <methodparam><parameter role="keyword">minsize</parameter></methodparam>
            <methodparam><parameter role="keyword">maxsize</parameter></methodparam>
            <methodparam><parameter role="keyword">async</parameter></methodparam>
        </methodsynopsis></programlisting>
      
        <variablelist>
            <varlistentry>
                <term><parameter role="keyword">format</parameter>&nbsp;:</term>
                <listitem><simpara> The format.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">minsize</parameter>&nbsp;:</term>
                <listitem><simpara> The minsize.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">maxsize</parameter>&nbsp;:</term>
                <listitem><simpara> The maxsize.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">async</parameter>&nbsp;:</term>
                <listitem><simpara> The async flag.</simpara></listitem>
            </varlistentry>
        </variablelist>

        <para>
            The <methodname>parse_buffer_size</methodname>() method gets the format, minsize, maxsize and async-flag in the buffersize event.
        </para>
    </refsect2>
    
    <refsect2 id="method-gstevent--parse-new-segment">
        <title>gst.Event.parse_new_segment</title>
        <programlisting><methodsynopsis language="python">
                <methodname>parse_new_segment</methodname>
                <methodparam><parameter role="keyword">update</parameter></methodparam>
                <methodparam><parameter role="keyword">rate</parameter></methodparam>
                <methodparam><parameter role="keyword">format</parameter></methodparam>
                <methodparam><parameter role="keyword">start</parameter></methodparam>
                <methodparam><parameter role="keyword">stop</parameter></methodparam>
                <methodparam><parameter role="keyword">position</parameter></methodparam>
            </methodsynopsis></programlisting>
        
        <variablelist>
            <varlistentry>
                <term><parameter role="keyword">update</parameter>&nbsp;:</term>
                <listitem><simpara> The update flag of the segment.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">rate</parameter>&nbsp;:</term>
                <listitem><simpara> The rate of the segment.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">format</parameter>&nbsp;:</term>
                <listitem><simpara> The format of the newsegment values.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">start</parameter>&nbsp;:</term>
                <listitem><simpara> The start value.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">stop</parameter>&nbsp;:</term>
                <listitem><simpara> The stop value.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">position</parameter>&nbsp;:</term>
                <listitem><simpara> The stream time.</simpara></listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            The <methodname>parse_new_segment</methodname>() method gets the format, start, stop and position in the newsegment event.
        </para>
    </refsect2>
    
    <refsect2 id="method-gstevent--parse-qos">
        <title>gst.Event.parse_qos</title>
        <programlisting><methodsynopsis language="python">
                <methodname>parse_qos</methodname>
                <methodparam><parameter role="keyword">proportion</parameter></methodparam>
                <methodparam><parameter role="keyword">diff</parameter></methodparam>
                <methodparam><parameter role="keyword">timestamp</parameter></methodparam>
            </methodsynopsis></programlisting>
        
        <variablelist>
            <varlistentry>
                <term><parameter role="keyword">proportion</parameter>&nbsp;:</term>
                <listitem><simpara> The proportion.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">diff</parameter>&nbsp;:</term>
                <listitem><simpara> The diff.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">timestamp</parameter>&nbsp;:</term>
                <listitem><simpara> The timestamp.</simpara></listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            The <methodname>parse_qos</methodname>() method gets the proportion, diff and timestamp in the qos event.
        </para>
    </refsect2>
    
    <refsect2 id="method-gstevent--parse-seek">
        <title>gst.Event.parse_seek</title>
        <programlisting><methodsynopsis language="python">
                <methodname>parse_seek</methodname>
                <methodparam><parameter role="keyword">rate</parameter></methodparam>
                <methodparam><parameter role="keyword">format</parameter></methodparam>
                <methodparam><parameter role="keyword">flags</parameter></methodparam>
                <methodparam><parameter role="keyword">cur_type</parameter></methodparam>
                <methodparam><parameter role="keyword">cur</parameter></methodparam>
                <methodparam><parameter role="keyword">stop_type</parameter></methodparam>
                <methodparam><parameter role="keyword">stop</parameter></methodparam>
            </methodsynopsis></programlisting>
        
        <variablelist>
            <varlistentry>
                <term><parameter role="keyword">rate</parameter>&nbsp;:</term>
                <listitem><simpara> The result location for the rate.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">format</parameter>&nbsp;:</term>
                <listitem><simpara> The result location for the stream format.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">flags</parameter>&nbsp;:</term>
                <listitem><simpara> The result location for 
                        <link linkend="class-gstseekflags"><classname>gst.SeekFlags</classname></link>.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">cur_type</parameter>&nbsp;:</term>
                <listitem><simpara> The The result location for 
                        <link linkend="class-gstseektype"><classname>gst.SeekType</classname></link> of the current position.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">cur</parameter>&nbsp;:</term>
                <listitem><simpara> The location for the current postion expressed in format.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">cur_type</parameter>&nbsp;:</term>
                <listitem><simpara> The The result location for 
                        <link linkend="class-gstseektype"><classname>gst.SeekType</classname></link> of the stop position.</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter role="keyword">cur</parameter>&nbsp;:</term>
                <listitem><simpara> The location for the stop postion expressed in format.</simpara></listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            The <methodname>parse_seek</methodname>() method parses a seek event and stores the results in the given result locations.
        </para>
    </refsect2>
    
    <refsect2 id="method-gstevent--parse-tags">
        <title>gst.Event.parse_tags</title>
        <programlisting><methodsynopsis language="python">
                <methodname>parse_tags</methodname>
                <methodparam><parameter role="keyword">taglist</parameter></methodparam>
            </methodsynopsis></programlisting>
        
        <variablelist>
            <varlistentry>
                <term><parameter role="keyword">taglist</parameter>&nbsp;:</term>
                <listitem><simpara> The metadata list.</simpara></listitem>
            </varlistentry>
        </variablelist>
        
        <para>
            The <methodname>parse_tags</methodname>() method parses a tag event and stores the results in the given taglist location.
        </para>
    </refsect2>
    
  </refsect1>

  <!-- ************************** -->
  <!-- BEGIN OF GSTEVENTFUNCTIONS -->
  <!-- ************************** --> 
  
    <refsect1>
        <title>Functions</title>
      
        <refsect2 id="function-gstevent--event-new-buffer-size">
            <title>gst.event_new_buffer_size</title>
            <programlisting><methodsynopsis language="python">
                <methodname>event_new_buffer_size</methodname>
                <methodparam><parameter role="keyword">format</parameter></methodparam>
                <methodparam><parameter role="keyword">minsize</parameter></methodparam>
                <methodparam><parameter role="keyword">maxsize</parameter></methodparam>
                <methodparam><parameter role="keyword">async</parameter></methodparam>
            </methodsynopsis></programlisting>
          
            <variablelist>
                <varlistentry>
                    <term><parameter role="keyword">format</parameter>&nbsp;:</term>
                    <listitem><simpara> The buffer format.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">minsize</parameter>&nbsp;:</term>
                    <listitem><simpara> The minimum buffer size.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">maxsize</parameter>&nbsp;:</term>
                    <listitem><simpara> The maximum buffer size.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">async</parameter>&nbsp;:</term>
                    <listitem><simpara> The thread behavior.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> The new <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
          
            <para>
                The <methodname>event_new_buffer_size</methodname>() function creates a new buffersize event. 
                The event is sent downstream and notifies elements that they should provide a buffer of the specified dimensions.
            </para>
            <para>
                When the async flag is set, a thread boundary is prefered.
            </para>
        </refsect2>
        
        <refsect2 id="function-gstevent--event-new-custom">
            <title>gst.event_new_custom</title>
            <programlisting><methodsynopsis language="python">
                    <methodname>event_new_custom</methodname>
                    <methodparam><parameter role="keyword">type</parameter></methodparam>
                    <methodparam><parameter role="keyword">structure</parameter></methodparam>
                </methodsynopsis></programlisting>
            
            <variablelist>
                <varlistentry>
                    <term><parameter role="keyword">type</parameter>&nbsp;:</term>
                    <listitem><simpara> The type of the new event.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">structure</parameter>&nbsp;:</term>
                    <listitem><simpara> The structure for the event. The event will take ownership of the structure.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> The new custom <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
            
            <para>
                The <methodname>event_new_custom</methodname>() function creates a new custom-typed event. 
                This can be used for anything not handled by other event-specific functions to pass an event to another element.
            </para>
            <para>
                New custom events can also be created by subclassing the event type if needed.
            </para>
        </refsect2>
        
        <refsect2 id="function-gstevent--event-new-eos">
            <title>gst.event_new_custom</title>
            <programlisting><methodsynopsis language="python">
                    <methodname>event_new_eos</methodname>
                    <methodparam></methodparam>
                </methodsynopsis></programlisting>
            
            <variablelist>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> The new EOS <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
            
            <para>
                The <methodname>event_new_eos</methodname>() function creates a new EOS event. 
                The eos event can only travel downstream synchronized with the buffer flow. 
                Elements that receive the EOS event on a pad can return UNEXPECTED as a GstFlowReturn when data after the EOS event arrives.
            </para>
            <para>
                The EOS event will travel up to the sink elements in the pipeline which will then post the gst.MESSAGE_EOS on the bus.
            </para>
            <para>
                When all sinks have posted an EOS message, the EOS message is forwarded to the application.
            </para>
        </refsect2>
        
        <refsect2 id="function-gstevent--event-new-flush-start">
            <title>gst.event_new_flush_start</title>
            <programlisting><methodsynopsis language="python">
                    <methodname>event_new_flush_start</methodname>
                    <methodparam></methodparam>
                </methodsynopsis></programlisting>
            
            <variablelist>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> A new flush start event <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
            
            <para>
                The <methodname>event_new_flush_start</methodname>() function allocates a new flush start event. 
                The flush start event can be send upstream and downstream and travels out-of-bounds with the dataflow. 
                It marks pads as being in a WRONG_STATE to process more data.
            </para>
            <para>
                Elements unlock and blocking functions and exit their streaming functions as fast as possible.
            </para>
            <para>
                This event is typically generated after a seek to minimize the latency after the seek.
            </para>
        </refsect2>
        
        <refsect2 id="function-gstevent--event-new-flush-stop">
            <title>gst.event_new_flush_stop</title>
            <programlisting><methodsynopsis language="python">
                    <methodname>event_new_flush_stop</methodname>
                    <methodparam></methodparam>
                </methodsynopsis></programlisting>
            
            <variablelist>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> A new flush stop event <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
            
            <para>
                The <methodname>event_new_flush_stop</methodname>() function allocate a new flush stop event. 
                The flush start event can be send upstream and downstream and travels out-of-bounds with the dataflow. 
                It is typically send after sending a FLUSH_START event to make the pads accept data again.
            </para>
            <para>
                Elements can process this event synchronized with the dataflow since the preceeding FLUSH_START event stopped the dataflow.
            </para>
            <para>
                This event is typically generated to complete a seek and to resume dataflow.
            </para>
        </refsect2>
        
        <refsect2 id="function-gstevent--event-new-navigation">
            <title>gst.event_new_navigation</title>
            <programlisting><methodsynopsis language="python">
                    <methodname>event_new_navigation</methodname>
                    <methodparam><parameter role="keyword">structure</parameter></methodparam>
                </methodsynopsis></programlisting>
            
            <variablelist>
                <varlistentry>
                    <term><parameter role="keyword">structure</parameter>&nbsp;:</term>
                    <listitem><simpara> The description of the event.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> The new <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
            
            <para>
                The <methodname>event_new_navigation</methodname>() function creates a new navigation event from the given description.
            </para>
        </refsect2>
        
        <refsect2 id="function-gstevent--event-new-new-segment">
            <title>gst.event_new_new_segment</title>
            <programlisting><methodsynopsis language="python">
                    <methodname>event_new_new_segment</methodname>
                    <methodparam><parameter role="keyword">update</parameter></methodparam>
                    <methodparam><parameter role="keyword">rate</parameter></methodparam>
                    <methodparam><parameter role="keyword">format</parameter></methodparam>
                    <methodparam><parameter role="keyword">start</parameter></methodparam>
                    <methodparam><parameter role="keyword">stop</parameter></methodparam>
                    <methodparam><parameter role="keyword">position</parameter></methodparam>
                </methodsynopsis></programlisting>
            
            <variablelist>
                <varlistentry>
                    <term><parameter role="keyword">update</parameter>&nbsp;:</term>
                    <listitem><simpara> Is this segment an update to a previous one.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">rate</parameter>&nbsp;:</term>
                    <listitem><simpara> A new rate for playback.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">format</parameter>&nbsp;:</term>
                    <listitem><simpara> The format of the segment values.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">start</parameter>&nbsp;:</term>
                    <listitem><simpara> The start value of the segment.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">stop</parameter>&nbsp;:</term>
                    <listitem><simpara> The stop value of the segment.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">position</parameter>&nbsp;:</term>
                    <listitem><simpara> The stream position.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> The new newsegment <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
            
            <para>
                The <methodname>event_new_new_segment</methodname>() function allocates a new newsegment event with the given format/values tripplets.
            </para>
            <para>
                The newsegment event marks the range of buffers to be processed. All data not within the segment range is not to be processed. 
                This can be used intelligently by plugins to use more efficient methods of skipping unneeded packets.
            </para>
            <para>
                The stream time of the segment is used to convert the buffer timestamps into the stream time again, 
                this is usually done in sinks to report the current stream_time. stream_time cannot be -1.
            </para>
            <para>
                start cannot be -1, stop can be -1. If there is a valid stop given, it must be greater or equal than start
            </para>
            <para>
                After a newsegment event, the buffer stream time is calculated with: stream_time + (TIMESTAMP(buf) - start) * ABS (rate)
            </para>
        </refsect2>
        
        <refsect2 id="function-gstevent--event-new-qos">
            <title>gst.event_new_qos</title>
            <programlisting><methodsynopsis language="python">
                    <methodname>event_new_qos</methodname>
                    <methodparam><parameter role="keyword">proportion</parameter></methodparam>
                    <methodparam><parameter role="keyword">diff</parameter></methodparam>
                    <methodparam><parameter role="keyword">timestamp</parameter></methodparam>
                </methodsynopsis></programlisting>
            
            <variablelist>
                <varlistentry>
                    <term><parameter role="keyword">proportion</parameter>&nbsp;:</term>
                    <listitem><simpara> The proportion of the qos message.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">diff</parameter>&nbsp;:</term>
                    <listitem><simpara> The time difference of the last Clock sync.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">timestamp</parameter>&nbsp;:</term>
                    <listitem><simpara> The timestamp of the buffer.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> The new QOS <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
            
            <para>
                The <methodname>event_new_qos</methodname>() function allocates a new qos event with the given values. 
                The QOS event is generated in an element that wants an upstream element to either reduce or increase its rate because of high/low CPU load.
            </para>
            <para>
                proportion is the requested adjustment in datarate, 1.0 is the normal datarate, 0.75 means increase datarate by 75%, 1.5 is 150%. 
                Negative values request a slow down, so -0.75 means a decrease by 75%.
            </para>
            <para>
                diff is the difference against the clock in stream time of the last buffer that caused the element to generate the QOS event.
            </para>
            <para>
                timestamp is the timestamp of the last buffer that cause the element to generate the QOS event.
            </para>
        </refsect2>
        
        <refsect2 id="function-gstevent--event-new-seek">
            <title>gst.event_new_seek</title>
            <programlisting><methodsynopsis language="python">
                    <methodname>event_new_seek</methodname>
                    <methodparam><parameter role="keyword">rate</parameter></methodparam>
                    <methodparam><parameter role="keyword">format</parameter></methodparam>
                    <methodparam><parameter role="keyword">flags</parameter></methodparam>
                    <methodparam><parameter role="keyword">cur_type</parameter></methodparam>
                    <methodparam><parameter role="keyword">cur</parameter></methodparam>
                    <methodparam><parameter role="keyword">stop_type</parameter></methodparam>
                    <methodparam><parameter role="keyword">stop</parameter></methodparam>
                </methodsynopsis></programlisting>
            
            <variablelist>
                <varlistentry>
                    <term><parameter role="keyword">rate</parameter>&nbsp;:</term>
                    <listitem><simpara> The new playback rate.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">format</parameter>&nbsp;:</term>
                    <listitem><simpara> The format of the seek values.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">flags</parameter>&nbsp;:</term>
                    <listitem><simpara> The optional seek flags.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">cur_type</parameter>&nbsp;:</term>
                    <listitem><simpara> The type and flags for the new current position.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">cur</parameter>&nbsp;:</term>
                    <listitem><simpara> The value of the new current position.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">stop_type</parameter>&nbsp;:</term>
                    <listitem><simpara> The type and flags for the new stop position.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><parameter role="keyword">stop</parameter>&nbsp;:</term>
                    <listitem><simpara> The value of the new stop position.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> The new seek <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
            
            <para>
                The <methodname>event_new_seek</methodname>() function allocates a new seek event with the given parameters.
            </para>
            <para>
                The seek event configures playback of the pipeline from cur to stop at the speed given in rate, also called a segment. 
                The <parameter>cur</parameter> and <parameter>stop</parameter>values are expressed in format <parameter>format</parameter>.
            </para>
            <para>
                A <parameter>rate</parameter> of 1.0 means normal playback rate, 2.0 means double speed. 
                Negatives values means backwards playback. A value of 0.0 for the rate is not allowed.
            </para>
            <para>
                <parameter>cur_type</parameter> and <parameter>stop_type</parameter> specify how to adjust the current and stop time, relative or absolute. 
                A type of gst.SEEK_TYPE_NONE means that the position should not be updated. 
                The currently configured playback segment can be queried with gst.QUERY_SEGMENT.
            </para>
            <para>
                Note that updating the cur position will actually move the current playback pointer to that new position. 
                It is not possible to seek relative to the current playing position, to do this, pause the pipeline, 
                get the current position and perform a gst.SEEK_TYPE_SET to the desired position.
            </para>
        </refsect2>
        
        <refsect2 id="function-gstevent--event-new-tags">
            <title>gst.event_new_tags</title>
            <programlisting><methodsynopsis language="python">
                    <methodname>event_new_tags</methodname>
                    <methodparam><parameter role="keyword">taglist</parameter></methodparam>
                </methodsynopsis></programlisting>
            
            <variablelist>
                <varlistentry>
                    <term><parameter role="keyword">taglist</parameter>&nbsp;:</term>
                    <listitem><simpara> The metadata list.</simpara></listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Returns</emphasis>&nbsp;:</term>
                    <listitem><simpara> The new <link linkend="class-gstevent"><classname>gst.Event</classname></link>.</simpara></listitem>
                </varlistentry>
            </variablelist>
            
            <para>
                The <methodname>event_new_tags</methodname>() function Generates a metadata tag event from the given <parameter>taglist</parameter>.
            </para>
        </refsect2>
    </refsect1>
</refentry>
