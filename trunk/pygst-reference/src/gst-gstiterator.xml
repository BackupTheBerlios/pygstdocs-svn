<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="class-gstiterator">
    <refnamediv>
        <refname>gst.Iterator</refname>
        <refpurpose>Object to retrieve multiple elements in a threadsafe way..</refpurpose>
    </refnamediv>

<!-- *************************** -->
<!-- BEGIN OF MyClass' SYNOPSIS -->
<!-- *************************** -->

<refsect1>
  <title>Synopsis</title>

  <classsynopsis language="python">
        <ooclass><classname>gst.Iterator</classname></ooclass>

    <constructorsynopsis language="python">
        <methodname><link linkend="constructor-gstiterator">gst.Iterator</link></methodname>
        <methodparam><parameter role="keyword">name</parameter><initializer>None</initializer></methodparam>
    </constructorsynopsis>
    
    <methodsynopsis language="python">
        <methodname><link linkend="method-gstiterator--next">next</link></methodname>
    </methodsynopsis>
  
    <methodsynopsis language="python">
        <methodname><link linkend="method-gstiterator--push">push</link></methodname>
        <methodparam><parameter role="keyword">iterator</parameter></methodparam>
    </methodsynopsis>
    
     <methodsynopsis language="python">
        <methodname><link linkend="method-gstiterator--resync">resync</link></methodname>
    </methodsynopsis>
    
  </classsynopsis>

</refsect1>


 
<!-- ***************************** -->
<!-- BEGIN OF MyClass' DESCRIPTION -->
<!-- ***************************** -->

<refsect1 id="description-gstiterator">
  <title>Description</title>
    <para>
        A gst.Iterator is used to retrieve multiple objects from another object in a threadsafe way.
       Various GStreamer objects provide access to their internal structures using an iterator.
    </para>
   
</refsect1>


<!-- ******************************** -->
<!-- BEGIN OF MyClass' CONSTRUCTOR -->
<!-- ******************************** -->

<refsect1 id="constructor-gstiterator">
    <title>Constructor</title>
    
    <programlisting><constructorsynopsis language="python">
            <methodname>gst.Iterator</methodname>
            <methodparam><parameter role="keyword">name</parameter><initializer>None</initializer></methodparam>
        </constructorsynopsis></programlisting>
    
    <variablelist>
        <varlistentry>
            <term><parameter role="keyword">name</parameter>&nbsp;:</term>
            <listitem><simpara> The name for the iterator.</simpara></listitem>
        </varlistentry>
    </variablelist>
    
    <para>
        Creates a new gst.Iterator with the given name.
    </para>
</refsect1>

<!-- ************************* -->
<!-- BEGIN OF MyClass' METHODS -->
<!-- ************************* -->

<refsect1>
    <title>Methods</title>

    <refsect2 id="method-gstiterator--next">
        <title>gst.Iterator.next</title>
        <programlisting><methodsynopsis language="python">
            <methodname>next</methodname>
            <methodparam></methodparam>
        </methodsynopsis></programlisting>
    
        <variablelist>
            <varlistentry>
                <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara>The result of the iteration. Unref after usage if this is a 
                refcounted object. MT safe.</simpara></listitem>
            </varlistentry>
        </variablelist>
      
        <para>
            The <methodname>next</methodname>() method gets the next item from the iterator. For iterators 
            that return refcounted objects, the returned object will have its refcount increased and should 
            therefore be unreffed after usage.
        </para>
    </refsect2>

    <refsect2 id="method-gstiterator--push">
        <title>gst.Iterator.push</title>
        <programlisting><methodsynopsis language="python">
            <methodname>push</methodname>
            <methodparam><parameter role="keyword">iterator</parameter></methodparam>
        </methodsynopsis></programlisting>
      
        <variablelist>
            <varlistentry>
                <term><parameter role="keyword">iterator</parameter>&nbsp;:</term>
                <listitem><simpara>The gst.Iterator to push</simpara></listitem>
            </varlistentry>
          <varlistentry>
             <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara>None</simpara></listitem>
          </varlistentry>
        </variablelist>
     
        <para>
            The <methodname>push</methodname>() method pushes other iterator onto it. All calls performed 
            on it are forwarded tot other. If other returns GST_ITERATOR_DONE, it is popped again and calls
             are handled by it again.
        </para>
    </refsect2>
    
    <refsect2 id="method-gstiterator--resync">
        <title>gst.Iterator.resync</title>
        <programlisting><methodsynopsis language="python">
            <methodname>resync</methodname>
        </methodsynopsis></programlisting>
      
        <variablelist>
          <varlistentry>
             <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara>None</simpara></listitem>
          </varlistentry>
        </variablelist>

        <para>
            The <methodname>resync</methodname>() method resyncs the iterator. This function is mostly 
            called after next() returned gst.ITERATOR_RESYNC.
        </para>
    </refsect2>
  </refsect1>

 
</refentry>



