<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="gst-constants">
    <refnamediv>
        <refname>gst Constants</refname>
        <refpurpose>The built-in constants of the gst module.</refpurpose>
    </refnamediv>

<!-- ************************ -->
<!-- BEGIN OF GST Constants SYNOPSIS -->
<!-- ************************ -->

<refsect1>
    <title>Synopsis</title>
<synopsis><link linkend="gst-activate-constants">GST Activate Type Constants</link>
<link linkend="gst-allocate-constants">GST Allocate Type Constants</link>
<link linkend="gst-association-constants">GST Assotiation Flag Constants</link>
<link linkend="gst-bin-constants">GST Bin Flag Constants</link>
<link linkend="gst-buffer-copy-constants">GST Buffer Copy Constants</link>
<link linkend="gst-buffer-flag-constants">GST Buffer Flag Constants</link>
<link linkend="gst-bus-flag-constants">GST Bus Flag Constants</link>
<link linkend="gst-bus-sync-constants">GST Bus Sync Constants</link>
<link linkend="gst-caps-constants">GST Caps Flag Constants</link>
<link linkend="gst-clock-entry-type-constants">GST Clock Entry Type Constants</link>
<link linkend="gst-clock-flag-constants">GST Clock Flag Constants</link>
<link linkend="gst-clock-return-constants">GST Clock Return Constants</link>
<link linkend="gst-core-error-constants">GST Core Error Constants</link>
<link linkend="gst-debug-color-constants">GST Debug Color Constants</link>
<link linkend="gst-element-constants">GST Element Flag Constants</link>
<link linkend="gst-event-type-constants">GST Event Type Constants</link>
<link linkend="gst-event-type-flag-constants">GST Event Type Flag Constants</link>
<link linkend="gst-flow-return-constants">GST Flow Return Constants</link>
<link linkend="gst-format-constants">GST Format Type Constants</link>
<link linkend="gst-index-constants">GST Index Type Constants</link>
<link linkend="gst-interpolate-constants">GST Interpolate Type Constants</link>
<link linkend="gst-iterator-constants">GST Iterator Type Constants</link>
<link linkend="gst-iterator-item-constants">GST Iterator Item Constants</link>
<link linkend="gst-level-constants">GST Level Type Constants</link>
<link linkend="gst-library-error-constants">GST Library Error Constants</link>
<link linkend="gst-message-constants">GST Message Type Constants</link>
<link linkend="gst-mini-object-constants">GST MiniObject Flag Constants</link>
<link linkend="gst-object-constants">GST Object Type Constants</link>
<link linkend="gst-pad-constants">GST Pad Constants</link>
<link linkend="gst-pad-direction-constants">GST Pad Direction Constants</link>
<link linkend="gst-pad-link-constants">GST Pad Link Constants</link>
<link linkend="gst-pad-presence-constants">GST Pad Presence Constants</link>
<link linkend="gst-pad-template-constants">GST Pad Template Constants</link>
<link linkend="gst-parse-constants">GST Parse Error Constants</link>
<link linkend="gst-pipeline-constants">GST Pipelene Flag Constants</link>
<link linkend="gst-plugin-error-constants">GST Plugin Error Constants</link>
<link linkend="gst-plugin-flag-constants">GST Plugin Flag Constants</link>
<link linkend="gst-query-constants">GST Query Type Constants</link>
<link linkend="gst-rank-constants">GST Rank Type Constants</link>
<link linkend="gst-resource-error-constants">GST Resource Error Constants</link>
<link linkend="gst-rtld-constants">GST RTLD Type Constants</link>
<link linkend="gst-seek-flag-constants">GST Seek Flag Constants</link>
<link linkend="gst-seek-type-constants">GST Seek Type Constants</link>
<link linkend="gst-state-constants">GST State Type Constants</link>
<link linkend="gst-stream-error-constants">GST Stream Error Constants</link>
<link linkend="gst-tag-constants">GST Tag Type Constants</link>
<link linkend="gst-tag-flag-constants">GST Tag Flag Constants</link>
<link linkend="gst-tag-merge-constants">GST Tag Merge Constants</link>
<link linkend="gst-task-constants">GST Task Flag Constants</link>
<link linkend="gst-type-constants">GST Type Flag Constants</link>
<link linkend="gst-type-find-constants">GST Type Find Constants</link>
<link linkend="gst-uri-constants">GST URI Type Constants</link>
<link linkend="gst-unknown-constants">GST Unknown Constants</link></synopsis>
</refsect1>

<refsect1>
  <title>Description</title>
    
    <!-- ************************ -->
    <!-- BEGIN OF GST Activate Type Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-activate-constants">
      <title>GST Activate Type Constants</title>
        <para>The status of a GstPad. After activating a pad, which usually happens when the parent 
        element goes from READY to PAUSED, the GstActivateMode defines if the pad operates in push or pull mode.</para>
        <variablelist>
          <varlistentry>
             <term><methodname>gst.ACTIVATE_NONE</methodname></term>
            <listitem><simpara>Pad will not handle dataflow</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ACTIVATE_PULL</methodname></term>
            <listitem><simpara>Pad handles dataflow in downstream push mode</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ACTIVATE_PUSH</methodname></term>
            <listitem><simpara>Pad handles dataflow in upstream pull mode</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Allocate Type Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-allocate-constants">

      <title>GST Allocate Type Constants</title>
        <para>The Allocate Flags indicating which tracing feature to enable.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.ALLOC_TRACE_LIVE</methodname></term>
            <listitem><simpara>Trace number of non-freed memory</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ALLOC_TRACE_MEM_LIVE</methodname></term>
            <listitem><simpara>Trace pointers of unfreed memory</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Association Flag Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-association-constants">
      <title>GST Association Flag Constants</title>
        <para>The Association Flags for an association entry.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.ASSOCIATION_FLAG_DELTA_UNIT</methodname></term>
            <listitem><simpara>the entry marks a delta unit, a delta unit is one that marks a place where one 
            can relatively seek to.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ASSOCIATION_FLAG_KEY_UNIT</methodname></term>
            <listitem><simpara>the entry marks a key unit, a key unit is one that marks a place where one can 
            randomly seek to.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ASSOCIATION_FLAG_LAST</methodname></term>
            <listitem><simpara>extra user defined flags should start here.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ASSOCIATION_FLAG_NONE</methodname></term>
            <listitem><simpara>no extra flags</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Bin Flag Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-bin-constants">
      <title>GST Bin Flag Constants</title>
        <para>The Bin Flags are a set of flags specific to bins. Most are set/used internally. 
        They can be checked using the GST_OBJECT_FLAG_IS_SET() macro, and (un)set using GST_OBJECT_FLAG_SET() 
        and GST_OBJECT_FLAG_UNSET().</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>gst.BIN_FLAG_LAST</methodname></term>
            <listitem><simpara>the last enum in the series of flags for bins. Derived classes can use
             this as first value in a list of flags.</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Bin Flag Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-buffer-copy-constants">
      <title>GST Buffer Copy Constants</title>
        <para>The Buffer Copy ...</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>GST_BUFFER_COPY_CAPS</methodname></term>
            <listitem><simpara>flag indicating that buffer caps should be copied</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>GST_BUFFER_COPY_FLAGS</methodname></term>
            <listitem><simpara>flag indicating that buffer flags should be copied</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>GST_BUFFER_COPY_TIMESTAMPS</methodname></term>
            <listitem><simpara>flag indicating that buffer timestamp, duration, offset and offset_end 
            should be copied</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>
    
    
    <!-- ************************ -->
    <!-- BEGIN OF GST Buffer Flag Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-buffer-flag-constants">
      <title>GST Buffer Flag Constants</title>
        <para>The Buffer Flags are used to describe properties of a gst.Buffer.</para>

        <variablelist>
          <varlistentry>
            <term><methodname>gst.BUFFER_FLAG_DELTA_UNIT</methodname></term>
            <listitem><simpara>this unit cannot be decoded independently.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUFFER_FLAG_DISCONT</methodname></term>
            <listitem><simpara>the buffer marks a discontinuity in the stream. This typically occurs after 
            a seek or a dropped buffer from a live or network source.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUFFER_FLAG_GAP</methodname></term>
            <listitem><simpara>the buffer has been created to fill a gap in the stream.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUFFER_FLAG_IN_CAPS</methodname></term>
            <listitem><simpara>the buffer has been added as a field in a gst.Caps.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUFFER_FLAG_LAST</methodname></term>
            <listitem><simpara>additional flags can be added starting from this flag.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUFFER_FLAG_PREROLL</methodname></term>
            <listitem><simpara>the buffer is part of a preroll and should not be displayed.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUFFER_FLAG_READONLY</methodname></term>
            <listitem><simpara>the buffer is read-only. This means the data of the buffer should not be 
            modified. The metadata might still be modified.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUFFER_OFFSET_NONE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Bus Type and Flag Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-bus-flag-constants">
      <title>GST Bus Flag Constants</title>
        <para>The Bus Flags that a bus may have.</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>gst.BUS_FLAG_LAST</methodname></term>
            <listitem><simpara>offset to define more flags</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUS_FLUSHING</methodname></term>
            <listitem><simpara>The bus is currently dropping all messages</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>
    
    
    <!-- ************************ -->
    <!-- BEGIN OF GST Bus Type and Flag Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-bus-sync-constants">
      <title>GST Bus Sync Constants</title>
        <para>The Bus Sync constants are result values for a gst.BusSyncHandler.</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>gst.BUS_ASYNC</methodname></term>
            <listitem><simpara>pass message to async queue, continue if message is handled</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUS_DROP</methodname></term>
            <listitem><simpara>drop the message</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.BUS_PASS</methodname></term>
            <listitem><simpara>pass the message to the async queue</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Caps Flag Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-caps-constants">
      <title>GST Caps Flag Constants</title>
        <para>The Caps Flags are extra flags for a caps.</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>gst.CAPS_FLAGS_ANY</methodname></term>
            <listitem><simpara>Caps has no specific content, but can contain anything.</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Clock Entry Type Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-clock-entry-type-constants">
      <title>GST Clock Entry Type Constants</title>
        <para>The type of the clock entry.</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>gst.CLOCK_ENTRY_PERIODIC</methodname></term>
            <listitem><simpara>a periodic timeout request</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_ENTRY_SINGLE</methodname></term>
            <listitem><simpara>a single shot timeout</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Clock Flag Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-clock-flag-constants">
      <title>GST Clock Flag Constants</title>
        <para>The Clock Flags are capabilities of this clock.</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>gst.CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC</methodname></term>
            <listitem><simpara>clock can do async periodic timeout callbacks</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_FLAG_CAN_DO_PERIODIC_SYNC</methodname></term>
            <listitem><simpara>clock can do sync periodic timeout requests</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_FLAG_CAN_DO_SINGLE_ASYNC</methodname></term>
            <listitem><simpara>clock can do a single async timeout request</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_FLAG_CAN_DO_SINGLE_SYNC</methodname></term>
            <listitem><simpara>clock can do a single sync timeout request</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_FLAG_CAN_SET_MASTER</methodname></term>
            <listitem><simpara>clock can be slaved to a master clock</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_FLAG_CAN_SET_RESOLUTION</methodname></term>
            <listitem><simpara>clock's resolution can be changed</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_FLAG_LAST</methodname></term>
            <listitem><simpara>subclasses can add additional flags starting from this flag</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>
    
    
    <!-- ************************ -->
    <!-- BEGIN OF GST Clock Return Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-clock-return-constants">
      <title>GST Clock Return Constants</title>
        <para>The Clock Returns are the return value of a clock operation.</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>gst.CLOCK_BADTIME</methodname></term>
            <listitem><simpara>A bad time was provided to a function.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_BUSY</methodname></term>
            <listitem><simpara>The ClockID is busy</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_EARLY</methodname></term>
            <listitem><simpara>The operation was scheduled too late.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_ERROR</methodname></term>
            <listitem><simpara>An error occured</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_OK</methodname></term>
            <listitem><simpara>The operation succeded.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_TIME_NONE</methodname></term>
            <listitem><simpara>Constant to define an undefined clock time.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_UNSCHEDULED</methodname></term>
            <listitem><simpara>The clockID was unscheduled</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CLOCK_UNSUPPORTED</methodname></term>
            <listitem><simpara>Operation is not supported</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>
    
    
    <!-- ************************ -->
    <!-- BEGIN OF GST Core Type Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-core-error-constants">
      <title>GST Core Error Constants</title>
        <para>Core errors are errors inside the core GStreamer library.</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR</methodname></term>
            <listitem><simpara>used for any errors.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_CAPS</methodname></term>
            <listitem><simpara>used for caps-related errors.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_CLOCK</methodname></term>
            <listitem><simpara>used for clock related errors. </simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_DISABLED</methodname></term>
            <listitem><simpara>used if functionality has been disabled at compile time</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_EVENT</methodname></term>
            <listitem><simpara>used for event-related errors.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_FAILED</methodname></term>
            <listitem><simpara>a general error which doesn't fit in any other category. Make sure you add a custom 
            message to the error call.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_MISSING_PLUGIN</methodname></term>
            <listitem><simpara>used if a plugin is missing.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_NEGOTIATION</methodname></term>
            <listitem><simpara>used for negotiation-related errors.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_NOT_IMPLEMENTED</methodname></term>
            <listitem><simpara>use this when you do not want to implement this functionality yet.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_NUM_ERRORS</methodname></term>
            <listitem><simpara>the number of core error types.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_PAD</methodname></term>
            <listitem><simpara>used for pad-related errors.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_SEEK</methodname></term>
            <listitem><simpara>used for seek-related errors. </simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_STATE_CHANGE</methodname></term>
            <listitem><simpara>used for state change errors.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_TAG</methodname></term>
            <listitem><simpara>used for negotiation-related errors.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_THREAD</methodname></term>
            <listitem><simpara>used for thread-related errors.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.CORE_ERROR_TOO_LAZY</methodname></term>
            <listitem><simpara>do not use this except as a placeholder for deciding where to go while developing 
            code.</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Debug Type Constants -->
    <!-- ************************ -->

    <refsect2 id="gst-debug-color-constants">
      <title>GST Debug Color Constants</title>
        <para>These are some terminal style flags you can use when creating your debugging categories to make them stand 
        out in debugging output.</para>
        
        <variablelist>
          <varlistentry>
            <term><methodname>gst.DEBUG_BG_BLACK</methodname></term>
            <listitem><simpara>Use black as background color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_BG_BLUE</methodname></term>
            <listitem><simpara>Use blue as background color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_BG_CYAN</methodname></term>
            <listitem><simpara>Use cyan as background color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_BG_GREEN</methodname></term>
            <listitem><simpara>Use green as background color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_BG_MAGENTA</methodname></term>
            <listitem><simpara>Use magenta as background color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_BG_RED</methodname></term>
            <listitem><simpara>Use red as background color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_BG_WHITE</methodname></term>
            <listitem><simpara>Use white as background color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_BG_YELLOW</methodname></term>
            <listitem><simpara>Use yellow as background color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_BOLD</methodname></term>
            <listitem><simpara>Make the output bold.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_FG_BLACK</methodname></term>
            <listitem><simpara>Use black as foreground color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_FG_BLUE</methodname></term>
            <listitem><simpara>Use blue as foreground color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_FG_CYAN</methodname></term>
            <listitem><simpara>Use cyan as foreground color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_FG_GREEN</methodname></term>
            <listitem><simpara>Use green as foreground color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_FG_MAGENTA</methodname></term>
            <listitem><simpara>Use magenta as foreground color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_FG_RED</methodname></term>
            <listitem><simpara>Use red as foreground color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_FG_WHITE</methodname></term>
            <listitem><simpara>Use white as foreground color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_FG_YELLOW</methodname></term>
            <listitem><simpara>Use yellow as foreground color.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DEBUG_UNDERLINE</methodname></term>
            <listitem><simpara>Underline the output.</simpara></listitem>
          </varlistentry>
        </variablelist>
    </refsect2>
    
    
    <!-- ************************ -->
    <!-- BEGIN OF GST DP Header Flag Constants -->
    <!-- ************************ -->

  <refsect2 id="gst-dp-header-flag-constants">
    <title>GST DP Header Flag Constants</title>
      <para>The DP Header Flags ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.DP_HEADER_FLAG_CRC</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DP_HEADER_FLAG_CRC_HEADER</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DP_HEADER_FLAG_CRC_PAYLOAD</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DP_HEADER_FLAG_NONE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST DP Payload Type Constants -->
    <!-- ************************ -->

  <refsect2 id="gst-dp-payload-type-constants">
    <title>GST DP Payload Type Constants</title>
      <para>The DP Payload Types ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.DP_PAYLOAD_BUFFER</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DP_PAYLOAD_CAPS</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DP_PAYLOAD_EVENT_NONE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.DP_PAYLOAD_NONE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Element Constants -->
    <!-- ************************ -->

  <refsect2 id="gst-element-constants">
    <title>GST Element Flag Constants</title>
      <para>The standard flags that an element may have.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.ELEMENT_FLAG_LAST</methodname></term>
            <listitem><simpara>offset to define more flags</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ELEMENT_IS_SINK</methodname></term>
            <listitem><simpara>the element is a sink</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ELEMENT_LOCKED_STATE</methodname></term>
            <listitem><simpara>ignore state changes from parent</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ELEMENT_UNPARENTING</methodname></term>
            <listitem><simpara>Child is being removed from the parent bin. remove() on a child 
            already being removed immediately returns FALSE.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>


    <!-- ************************ -->
    <!-- BEGIN OF GST Event Type Constants -->
    <!-- ************************ -->
    
  <refsect2 id="gst-event-type-constants">
    <title>GST Event Type Constants</title>
      <para>The Event Types lists the standard event types that can be sent in a pipeline.</para>
      
        <variablelist>
          <varlistentry>
            <term><methodname>gst.EVENT_BUFFERSIZE</methodname></term>
            <listitem><simpara>Notification of buffering requirements</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_CUSTOM_BOTH</methodname></term>
            <listitem><simpara>Custom upstream or downstream event. In-band when travelling 
            downstream.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_CUSTOM_BOTH_OOB</methodname></term>
            <listitem><simpara>Custom upstream or downstream out-of-band event.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_CUSTOM_DOWNSTREAM</methodname></term>
            <listitem><simpara>Downstream custom event that travels in the data flow.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_CUSTOM_DOWNSTREAM_OOB</methodname></term>
            <listitem><simpara>Custom out-of-band downstream event.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_CUSTOM_UPSTREAM</methodname></term>
            <listitem><simpara>Upstream custom event</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_EOS</methodname></term>
            <listitem><simpara>End-Of-Stream. No more data is to be expected to follow without a 
            NEWSEGMENT event.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_FLUSH_START</methodname></term>
            <listitem><simpara>Start a flush operation</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_FLUSH_STOP</methodname></term>
            <listitem><simpara>Stop a flush operation</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_LATENCY</methodname></term>
            <listitem><simpara>Notification of new latency adjustment.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_NAVIGATION</methodname></term>
            <listitem><simpara>Navigation events are usually used for communicating user requests, such as mouse or
             keyboard movements, to upstream elements.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_NEWSEGMENT</methodname></term>
            <listitem><simpara>A new media segment follows in the dataflow.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_QOS</methodname></term>
            <listitem><simpara>A quality message. Used to indicate to upstream elements that the downstream elements
             are being starved of or flooded with data.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_SEEK</methodname></term>
            <listitem><simpara>A request for a new playback position and rate.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_TAG</methodname></term>
            <listitem><simpara>A new set of metadata tags has been found in the stream.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_UNKNOWN</methodname></term>
            <listitem><simpara>unknown event.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  
    <!-- ************************ -->
    <!-- BEGIN OF GST Event Type Flag Constants -->
    <!-- ************************ -->
    
  <refsect2 id="gst-event-type-flag-constants">
    <title>GST Event Type Flag Constants</title>
      <para>The Event Type Flags indicates the aspects of the different gst.EventType values. You can get the type 
      flags of a gst.EventType with the gst_event_type_get_flags() function.</para>
      
        <variablelist>
          <varlistentry>
            <term><methodname>gst.EVENT_TYPE_DOWNSTREAM</methodname></term>
            <listitem><simpara>Set if the event can travel downstream.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_TYPE_SERIALIZED</methodname></term>
            <listitem><simpara>Set if the event should be serialized with data flow.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.EVENT_TYPE_UPSTREAM</methodname></term>
            <listitem><simpara>Set if the event can travel upstream.</simpara></listitem>
          </varlistentry>
       </variablelist>
  </refsect2>
  

    <!-- ************************ -->
    <!-- BEGIN OF GST Flow Return Constants -->
    <!-- ************************ -->
    
  <refsect2 id="gst-flow-return-constants">
    <title>GST Flow Return Constants</title>
      <para>The Flow Return constants are the result of passing data to a pad.</para>
      
        <variablelist>
          <varlistentry>
            <term><methodname>gst.FLOW_CUSTOM_ERROR</methodname></term>
            <listitem><simpara>Elements can use values starting from this to define custom error codes. </simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FLOW_CUSTOM_SUCCESS</methodname></term>
            <listitem><simpara>Elements can use values starting from this to define custom success codes. </simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FLOW_ERROR</methodname></term>
            <listitem><simpara>Some (fatal) error occured. Element generating this error should post an error 
            message with more details.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FLOW_NOT_LINKED</methodname></term>
            <listitem><simpara>Pad is not linked.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FLOW_NOT_NEGOTIATED</methodname></term>
            <listitem><simpara>Pad is not negotiated.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FLOW_NOT_SUPPORTED</methodname></term>
            <listitem><simpara>This operation is not supported.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FLOW_OK</methodname></term>
            <listitem><simpara>Data passing was ok.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FLOW_RESEND</methodname></term>
            <listitem><simpara>Resend buffer, possibly with new caps (not send yet).</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FLOW_UNEXPECTED</methodname></term>
            <listitem><simpara>Did not expect anything, like after EOS.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FLOW_WRONG_STATE</methodname></term>
            <listitem><simpara>Pad is in wrong state.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-format-constants">
    <title>GST Format Constants</title>
      <para>The Format constants is a set of standard predefined formats.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.FORMAT_BUFFERS</methodname></term>
            <listitem><simpara>buffers</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FORMAT_BYTES</methodname></term>
            <listitem><simpara>bytes</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FORMAT_DEFAULT</methodname></term>
            <listitem><simpara>the default format of the pad/element. This can be samples for raw audio, 
            frames/fields for raw video.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FORMAT_PERCENT</methodname></term>
            <listitem><simpara>percentage of stream</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FORMAT_TIME</methodname></term>
            <listitem><simpara>time in nanoseconds</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.FORMAT_UNDEFINED</methodname></term>
            <listitem><simpara>undefined format</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-index-constants">
    <title>GST Index Type Constants</title>
      <para>The Index ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.INDEX_CERTAIN</methodname></term>
            <listitem><simpara>accuracy is perfect</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_ENTRY_ASSOCIATION</methodname></term>
            <listitem><simpara>This entry is an association between formats</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_ENTRY_FORMAT</methodname></term>
            <listitem><simpara>A format definition</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_ENTRY_ID</methodname></term>
            <listitem><simpara>This entry is an id that maps an index id to its owner object</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_ENTRY_OBJECT</methodname></term>
            <listitem><simpara>An object</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_FLAG_LAST</methodname></term>
            <listitem><simpara>First flag that can be used by subclasses</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_FUZZY</methodname></term>
            <listitem><simpara>accuracy is fuzzy</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_LOOKUP_AFTER</methodname></term>
            <listitem><simpara>The exact entry or the one after it</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_LOOKUP_BEFORE</methodname></term>
            <listitem><simpara>The exact entry or the one before it</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_LOOKUP_EXACT</methodname></term>
            <listitem><simpara>There has to be an exact indexentry with the given format/value</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_READABLE</methodname></term>
            <listitem><simpara>The index is readable</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_RESOLVER_CUSTOM</methodname></term>
            <listitem><simpara>Use a custom resolver</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_RESOLVER_GTYPE</methodname></term>
            <listitem><simpara>Resolve based on the GType of the object</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_RESOLVER_PATH</methodname></term>
            <listitem><simpara>Resolve on the path in graph</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_UNKNOWN</methodname></term>
            <listitem><simpara>accuracy is not known</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INDEX_WRITABLE</methodname></term>
            <listitem><simpara>The index is writable</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-interpolate-constants">
    <title>GST Interpolate Type Constants</title>
      <para>The Interpolate ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.INTERPOLATE_CUBIC</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INTERPOLATE_LINEAR</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INTERPOLATE_NONE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INTERPOLATE_QUADRATIC</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INTERPOLATE_TRIGGER</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.INTERPOLATE_USER</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-iterator-constants">
    <title>GST Iterator Type Constants</title>
      <para>The Iterator ...</para>
      
        <variablelist>
          <varlistentry>
            <term><methodname>gst.ITERATOR_DONE</methodname></term>
            <listitem><simpara>No more items in the iterator</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ITERATOR_ERROR</methodname></term>
            <listitem><simpara>An error happened</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ITERATOR_OK</methodname></term>
            <listitem><simpara>An item was retrieved</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ITERATOR_RESYNC</methodname></term>
            <listitem><simpara>Datastructure changed while iterating</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-iterator-item-constants">
    <title>GST Iterator Item Constants</title>
      <para>The Iterator Item Constants are the result of a GstIteratorItemFunction.</para>
      
        <variablelist>
           <varlistentry>
            <term><methodname>gst.ITERATOR_ITEM_END</methodname></term>
            <listitem><simpara>Stop after this item.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ITERATOR_ITEM_PASS</methodname></term>
            <listitem><simpara>Return item</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.ITERATOR_ITEM_SKIP</methodname></term>
            <listitem><simpara>Skip this item</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-level-constants">
    <title>GST Level Type Constants</title>
      <para>The level defines the importance of a debugging message. The more important a message is, the greater the 
      probability that the debugging system outputs it.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.LEVEL_COUNT</methodname></term>
            <listitem><simpara>The number of defined debugging levels.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LEVEL_DEBUG</methodname></term>
            <listitem><simpara>Debugging messages should be used when something common happens that is not the expected 
            default behavior. An example would be notifications about state changes or receiving/sending of events.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LEVEL_ERROR</methodname></term>
            <listitem><simpara>Error messages are to be used only when an error occured that stops the application from 
            keeping working correctly. An examples is gst_element_error, which outputs a message with this priority. It 
            does not mean that the application is terminating as with g_errror.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LEVEL_INFO</methodname></term>
            <listitem><simpara>Informational messages should be used to keep the developer updated about what is happening. 
            Examples where this should be used are when a typefind function has successfully determined the type of the 
            stream or when an mp3 plugin detects the format to be used. ("This file has mono sound.")</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LEVEL_LOG</methodname></term>
            <listitem><simpara>Log messages are messages that are very common but might be useful to know. As a rule of 
            thumb a pipeline that is iterating as expected should never output anzthing else but LOG messages. Examples 
            for this are referencing/dereferencing of objects or cothread switches.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LEVEL_NONE</methodname></term>
            <listitem><simpara>No debugging level specified or desired. Used to deactivate debugging output.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LEVEL_WARNING</methodname></term>
            <listitem><simpara>Warning messages are to inform about abnormal behaviour that could lead to problems or weird 
            behaviour later on. An example of this would be clocking issues ("your computer is pretty slow") or broken input 
            data ("Can't synchronize to stream.")</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

 <refsect2 id="gst-library-error-constants">
    <title>GST Library Error Constants</title>
      <para>Library errors are for errors from the library being used by elements (initializing, finalizing, 
      settings, ...)</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.LIBRARY_ERROR</methodname></term>
            <listitem><simpara>used for any error.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LIBRARY_ERROR_ENCODE</methodname></term>
            <listitem><simpara>used when the library generated an encoding error.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LIBRARY_ERROR_FAILED</methodname></term>
            <listitem><simpara>a general error which doesn't fit in any other category. Make sure you add a custom 
            message to the error call.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LIBRARY_ERROR_INIT</methodname></term>
            <listitem><simpara>used when the library could not be opened. </simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LIBRARY_ERROR_NUM_ERRORS</methodname></term>
            <listitem><simpara>the number of library error types.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LIBRARY_ERROR_SETTINGS</methodname></term>
            <listitem><simpara>used when the library doesn't accept settings.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LIBRARY_ERROR_SHUTDOWN</methodname></term>
            <listitem><simpara>used when the library could not be closed.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.LIBRARY_ERROR_TOO_LAZY</methodname></term>
            <listitem><simpara>do not use this except as a placeholder for deciding where to go while developing 
            code.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-message-constants">
    <title>GST Message Type Constants</title>
      <para>The Messages are posted on the bus when an event happens.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.MESSAGE_ANY</methodname></term>
            <listitem><simpara>mask for all of the other messages.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_APPLICATION</methodname></term>
            <listitem><simpara>message posted by the application, possibly via an application-specific element.</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.MESSAGE_ASYNC_DONE</methodname></term>
            <listitem><simpara>Posted by elements when they complete an ASYNC state change. </simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.MESSAGE_ASYNC_START</methodname></term>
            <listitem><simpara>Posted by elements when they start an ASYNC state change.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_BUFFERING</methodname></term>
            <listitem><simpara>the pipeline is buffering. When the application receives a buffering message in 
            the PLAYING state for a non-live pipeline it must PAUSE the pipeline until the buffering completes, 
            when the percentage field in the message is 100%. For live pipelines, no action must be performed and 
            the buffering percentage can be used to infor the user about the progress.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_CLOCK_LOST</methodname></term>
            <listitem><simpara>The current clock as selected by the pipeline became unusable. The pipeline will
             select a new clock on the next PLAYING state change.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_CLOCK_PROVIDE</methodname></term>
            <listitem><simpara>an element notifies its capability of providing a clock.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_DURATION</methodname></term>
            <listitem><simpara>The duration of a pipeline changed.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_ELEMENT</methodname></term>
            <listitem><simpara>element-specific message, see the specific element's documentation</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_EOS</methodname></term>
            <listitem><simpara>end-of-stream reached in a pipeline. The application will only receive this 
            message in the PLAYING state and every time it sets a pipeline to PLAYING that is in the EOS state. 
            The application can perform a seek in the pipeline to a new position.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_ERROR</methodname></term>
            <listitem><simpara>an error occured. Whe the application receives an error message it should stop 
            playback of the pipeline and not assume that more data will be played.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_INFO</methodname></term>
            <listitem><simpara>an info message occured</simpara></listitem>
          </varlistentry> 
          <varlistentry>
            <term><methodname>gst.MESSAGE_Latency</methodname></term>
            <listitem><simpara>Posted by elements when their latency changes. The pipeline will calculate and 
            distribute a new latency.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_NEW_CLOCK</methodname></term>
            <listitem><simpara>a new clock was selected in the pipeline.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_SEGMENT_DONE</methodname></term>
            <listitem><simpara>pipeline completed playback of a segment.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_SEGMENT_START</methodname></term>
            <listitem><simpara>pipeline started playback of a segment.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_STATE_CHANGED</methodname></term>
            <listitem><simpara>a state change happened</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_STATE_DIRTY</methodname></term>
            <listitem><simpara>an element changed state in a streaming thread. This message is deprecated.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_STEP_DONE</methodname></term>
            <listitem><simpara>a framestep finished. This message is not yet implemented.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_STREAM_STATUS</methodname></term>
            <listitem><simpara>status about a stream, emitted when it starts, stops, errors, etc.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_STRUCTURE_CHANGE</methodname></term>
            <listitem><simpara>the structure of the pipeline changed.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_TAG</methodname></term>
            <listitem><simpara>a tag was found.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_UNKNOWN</methodname></term>
            <listitem><simpara>an undefined message</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MESSAGE_WARNING</methodname></term>
            <listitem><simpara>a warning occured.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-mini-object-constants">
    <title>GST MiniObject Flag Constants</title>
      <para>The MiniObject ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.MINI_OBJECT_FLAG_LAST</methodname></term>
            <listitem><simpara>first flag that can be used by subclasses.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MINI_OBJECT_FLAG_READONLY</methodname></term>
            <listitem><simpara>is the miniobject readonly or writable</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-object-constants">
    <title>GST Object Flag Constants</title>
      <para>The standard flags that an gstobject may have.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.OBJECT_DISPOSING</methodname></term>
            <listitem><simpara>the object is been destroyed, do use it anymore</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.OBJECT_FLAG_LAST</methodname></term>
            <listitem><simpara>subclasses can add additional flags starting from this flag</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.OBJECT_FLOATING</methodname></term>
            <listitem><simpara>the object has a floating reference count (e.g. its not assigned to a bin)</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-pad-constants">
    <title>GST Pad Constants</title>
      <para>The Pad ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PAD_BLOCKED</methodname></term>
            <listitem><simpara>is dataflow on a pad blocked</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_BLOCKING</methodname></term>
            <listitem><simpara>is pad currently blocking on a buffer or event</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_FLAG_LAST</methodname></term>
            <listitem><simpara>offset to define more flags</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_FLUSHING</methodname></term>
            <listitem><simpara>is pad refusing buffers</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_IN_GETCAPS</methodname></term>
            <listitem><simpara>gst.PadGetCapsFunction() is running now</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_IN_SETCAPS</methodname></term>
            <listitem><simpara>gst.PadSetCapsFunction() is running now</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-pad-direction-constants">
    <title>GST Pad Direction Constants</title>
      <para>The Pad Direction constants tells the direction of a pad.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PAD_SINK</methodname></term>
            <listitem><simpara>the pad is a sink pad.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_SRC</methodname></term>
            <listitem><simpara>the pad is a source pad.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_UNKNOWN</methodname></term>
            <listitem><simpara>direction is unknown.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-pad-link-constants">
    <title>GST Pad Link Constants</title>
      <para>The Pad Link constants </para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PAD_LINK_NOFORMAT</methodname></term>
            <listitem><simpara>pads do not have common format</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_LINK_NOSCHED</methodname></term>
            <listitem><simpara>pads cannot cooperate in scheduling</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_LINK_OK</methodname></term>
            <listitem><simpara>link succeeded</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_LINK_REFUSED</methodname></term>
            <listitem><simpara>refused for some reason </simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_LINK_WAS_LINKED</methodname></term>
            <listitem><simpara>pad was already linked</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_LINK_WRONG_DIRECTION</methodname></term>
            <listitem><simpara>pads have wrong direction</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_LINK_WRONG_HIERARCHY</methodname></term>
            <listitem><simpara>pads have no common grandparent</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-pad-presence-constants">
    <title>GST Pad Presence Constants</title>
      <para>The Pad Presence flags.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PAD_ALWAYS</methodname></term>
            <listitem><simpara>the pad is always available</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_REQUEST</methodname></term>
            <listitem><simpara>the pad is only available on request with gst_element_request_pad_by_name() or 
            gst.Element.request_compatible_pad().</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_SOMETIMES</methodname></term>
            <listitem><simpara>the pad will become available depending on the media stream</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-pad-template-constants">
    <title>GST Pad Template Constants</title>
      <para>The Pad Template flags.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PAD_TEMPLATE_FIXED</methodname></term>
            <listitem><simpara>the padtemplate has no variable properties</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PAD_TEMPLATE_FLAG_LAST</methodname></term>
            <listitem><simpara>first flag that can be used by subclasses.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-parse-constants">
    <title>GST Parse Error Constants</title>
      <para>The different parsing errors that can occur.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PARSE_ERROR_COULD_NOT_SET_PROPERTY</methodname></term>
            <listitem><simpara>There was an error setting a property</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PARSE_ERROR_EMPTY</methodname></term>
            <listitem><simpara>An empty description was specified</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PARSE_ERROR_EMPTY_BIN</methodname></term>
            <listitem><simpara>An empty bin was specified.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PARSE_ERROR_LINK</methodname></term>
            <listitem><simpara>There was an error linking two pads.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PARSE_ERROR_NO_SUCH_ELEMENT</methodname></term>
            <listitem><simpara>The description contained an unknown element</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PARSE_ERROR_NO_SUCH_PROPERTY</methodname></term>
            <listitem><simpara>An element did not have a specified property</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PARSE_ERROR_SYNTAX</methodname></term>
            <listitem><simpara>A syntax error occured.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-pipeline-constants">
    <title>GST Pipeline Flag Constants</title>
      <para>The Pipeline Flags</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PIPELINE_FLAG_FIXED_CLOCK</methodname></term>
            <listitem><simpara>this pipeline works with a fixed clock</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PIPELINE_FLAG_LAST</methodname></term>
            <listitem><simpara>offset to define more flags</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-plugin-error-constants">
    <title>GST Plugin Error Constants</title>
      <para>The Plugin loading error constants.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PLUGIN_ERROR_DEPENDENCIES</methodname></term>
            <listitem><simpara>The plugin has unresolved dependencies</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PLUGIN_ERROR_MODULE</methodname></term>
            <listitem><simpara>The plugin could not be loaded</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.PLUGIN_ERROR_NAME_MISMATCH</methodname></term>
            <listitem><simpara>The plugin has already be loaded from a different file</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-plugin-flag-constants">
    <title>GST Plugin Flag Constants</title>
      <para>The Plugin Flag ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PLUGIN_FLAG_CACHED</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-query-constants">
    <title>GST Query Constants</title>
      <para>The Query ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.QUERY_CONVERT</methodname></term>
            <listitem><simpara>convert values between formats</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.QUERY_DURATION</methodname></term>
            <listitem><simpara>total duration of the stream</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.QUERY_FORMATS</methodname></term>
            <listitem><simpara>query supported formats for convert</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.QUERY_JITTER</methodname></term>
            <listitem><simpara>current jitter of stream</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.QUERY_LATENCY</methodname></term>
            <listitem><simpara>latency of stream</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.QUERY_NONE</methodname></term>
            <listitem><simpara>invalid query type</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.QUERY_POSITION</methodname></term>
            <listitem><simpara>current position in stream</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.QUERY_RATE</methodname></term>
            <listitem><simpara>current rate of the stream</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.QUERY_SEEKING</methodname></term>
            <listitem><simpara>seeking capabilities</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.QUERY_SEGMENT</methodname></term>
            <listitem><simpara>segment start/stop positions</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-rank-constants">
    <title>GST Rank Constants</title>
      <para>Element priority ranks. Defines the order in which the autoplugger (or similar rank-picking mechanisms) 
      will choose this element over an alternative one with the same function.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.RANK_MARGINAL</methodname></term>
            <listitem><simpara>unlikly to be chosen</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RANK_NONE</methodname></term>
            <listitem><simpara>will be chosen last or not at all</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RANK_PRIMARY</methodname></term>
            <listitem><simpara>will be chosen first</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RANK_SECONDARY</methodname></term>
            <listitem><simpara>likely to be chosen</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-resource-error-constants">
    <title>GST Resource Error Constants</title>
      <para>Resource errors are for any resource used by an element: memory, files, network connections,
       process space, ... They're typically used by source and sink elements.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR</methodname></term>
            <listitem><simpara>used for any error.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_BUSY</methodname></term>
            <listitem><simpara>used when resource is busy.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_CLOSE</methodname></term>
            <listitem><simpara>used when the resource can't be closed.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_FAILED</methodname></term>
            <listitem><simpara>a general error which doesn't fit in any other category. Make sure you add a 
            custom message to the error call.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_NOT_FOUND</methodname></term>
            <listitem><simpara>used when the resource could not be found.</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_NO_SPACE_LEFT</methodname></term>
            <listitem><simpara>used when the resource has no space left.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_NUM_ERRORS</methodname></term>
            <listitem><simpara>the number of resource error types.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_OPEN_READ</methodname></term>
            <listitem><simpara>used when resource fails to open for reading.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_OPEN_READ_WRITE</methodname></term>
            <listitem><simpara>used when resource cannot be opened for both reading and writing, or either 
            (but unspecified which).</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_OPEN_WRITE</methodname></term>
            <listitem><simpara>used when resource fails to open for writing.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_READ</methodname></term>
            <listitem><simpara>used when the resource can't be read from.</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_SEEK</methodname></term>
            <listitem><simpara>used when a seek on the resource fails.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_SETTINGS</methodname></term>
            <listitem><simpara>used when settings can't be manipulated on.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_SYNC</methodname></term>
            <listitem><simpara>used when a synchronize on the resource fails.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_TOO_LAZY</methodname></term>
            <listitem><simpara>do not use this except as a placeholder for deciding where to go while 
            developing code.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RESOURCE_ERROR_WRITE</methodname></term>
            <listitem><simpara>used when the resource can't be written to.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-rtld-constants">
    <title>GST RTLD Flag Constants</title>
      <para>The RTLD ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.RTLD_GLOBAL</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.RTLD_LAZY</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-seek-flag-constants">
    <title>GST Seek Flag Constants</title>
      <para>The Seek Flags to be used with gst.Element.seek() or gst.event_new_seek(). All flags can be used together.

A non flushing seek might take some time to perform as the currently playing data in the pipeline will not be cleared.

An accurate seek might be slower for formats that don't have any indexes or timestamp markers in the stream. Specifying 
this flag might require a complete scan of the file in those cases.

When performing a segment seek: after the playback of the segment completes, no EOS will be emmited by the element 
that performed the seek, but a gst.MESSAGE_SEGMENT_DONE message will be posted on the bus by the element. When this
 message is posted, it is possible to send a new seek event to continue playback. With this seek method it is possible
  to perform seemless looping or simple linear editing.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.SEEK_FLAG_ACCURATE</methodname></term>
            <listitem><simpara>accurate position is requested, this might be considerably slower for some formats.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.SEEK_FLAG_FLUSH</methodname></term>
            <listitem><simpara>flush pipeline</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.SEEK_FLAG_KEY_UNIT</methodname></term>
            <listitem><simpara>seek to the nearest keyframe. This might be faster but less accurate.</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.SEEK_FLAG_NONE</methodname></term>
            <listitem><simpara>no flag</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.SEEK_FLAG_SEGMENT</methodname></term>
            <listitem><simpara>perform a segment seek.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-seek-type-constants">
    <title>GST Seek Type Constants</title>
      <para>The Seek Types of seek events. When constructing a seek event with gst.event_new_seek(),
      a format, a seek method and optional flags are to be provided. The seek event is then inserted into the graph 
      with gst.Pad.send_event() or gst.Element.send_event().</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.SEEK_TYPE_CUR</methodname></term>
            <listitem><simpara>change relative to current position</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.SEEK_TYPE_END</methodname></term>
            <listitem><simpara>relative position to duration is requested</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.SEEK_TYPE_NONE</methodname></term>
            <listitem><simpara>no change in position is required</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.SEEK_TYPE_SET</methodname></term>
            <listitem><simpara>absolute position is requested</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

 <refsect2 id="gst-state-constants">
    <title>GST State Type Constants</title>
      <para>The State ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_ASYNC</methodname></term>
          <listitem><simpara>the state change will happen asynchronously</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_FAILURE</methodname></term>
            <listitem><simpara>the state change failed</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_NO_PREROLL</methodname></term>
            <listitem><simpara>the state change cannot be prerolled</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_NULL_TO_READY</methodname></term>
            <listitem><simpara>state change from NULL to READY</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_PAUSED_TO_PLAYING</methodname></term>
            <listitem><simpara>state change from PAUSED to PLAYING</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_PAUSED_TO_READY</methodname></term>
            <listitem><simpara>state change from PAUSED to READY</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_PLAYING_TO_PAUSED</methodname></term>
            <listitem><simpara>state change from PLAYING to PAUSED</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_READY_TO_NULL</methodname></term>
            <listitem><simpara>state change from READY to NULL</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_READY_TO_PAUSED</methodname></term>
            <listitem><simpara>state change from READY to PAUSED</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_CHANGE_SUCCESS</methodname></term>
            <listitem><simpara>the state change succeeded</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_NULL</methodname></term>
            <listitem><simpara>the NULL state or initial state of an element</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_PAUSED</methodname></term>
            <listitem><simpara>the element is PAUSED</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_PLAYING</methodname></term>
            <listitem><simpara>the element is PLAYING</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_READY</methodname></term>
            <listitem><simpara>the element is ready to go to PAUSED</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STATE_VOID_PENDING</methodname></term>
            <listitem><simpara>no pending state</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

 <refsect2 id="gst-stream-error-constants">
    <title>GST Stream Error Constants</title>
      <para>Stream errors are for anything related to the stream being processed: format errors, 
      media type errors, ... They're typically used by decoders, demuxers, converters, ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR</methodname></term>
            <listitem><simpara>used for any stream errors.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_CODEC_NOT_FOUND</methodname></term>
            <listitem><simpara>used when there's no codec to handle the stream's type.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_DECODE</methodname></term>
            <listitem><simpara>used when decoding fails.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_DEMUX</methodname></term>
            <listitem><simpara>used when demuxing fails.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_ENCODE</methodname></term>
            <listitem><simpara>used when encoding fails.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_FAILED</methodname></term>
            <listitem><simpara>a general error which doesn't fit in any other category. Make sure you add a 
            custom message to the error call.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_FORMAT</methodname></term>
            <listitem><simpara>used when the stream is of the wrong format (for example, wrong caps).</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_MUX</methodname></term>
            <listitem><simpara>used when muxing fails.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_NOT_IMPLEMENTED</methodname></term>
            <listitem><simpara>use this when you do not want to implement this functionality yet.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_NUM_ERRORS</methodname></term>
            <listitem><simpara>the number of stream error types.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_TOO_LAZY</methodname></term>
            <listitem><simpara>do not use this except as a placeholder for deciding where to go while 
            developing code.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_TYPE_NOT_FOUND</methodname></term>
            <listitem><simpara>used when the element doesn't know the stream's type.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.STREAM_ERROR_WRONG_TYPE</methodname></term>
            <listitem><simpara>used when the element doesn't handle this type of stream.</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

 <refsect2 id="gst-tag-constants">
    <title>GST Tag Constants</title>
      <para>The Tag ...</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.TAG_ALBUM</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_ALBUM_GAIN</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_ALBUM_PEAK</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_ALBUM_VOLUME_COUNT</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_ALBUM_VOLUME_NUMBER</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_ARTIST</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_AUDIO_CODEC</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_BITRATE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.TAG_CODEC</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_COMMENT</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_CONTACT</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.TAG_COPYRIGHT</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_DATE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_DESCRIPTION</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.TAG_DURATION</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_ENCODER</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_ENCODER_VERSION</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_EXTENDED_COMMENT</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_GENRE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_IMAGE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_ISRC</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_LANGUAGE_CODE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_LICENSE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_LOCATION</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.TAG_MAXIMUM_BITRATE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_MINIMUM_BITRATE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_NOMINAL_BITRATE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_ORGANIZATION</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_PERFORMER</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_PREVIEW_IMAGE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_SERIAL</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_TITLE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_TRACK_COUNT</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_TRACK_GAIN</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_TRACK_NUMBER</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_TRACK_PEAK</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_VERSION</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_VIDEO_CODEC</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-tag-flag-constants">
    <title>GST Tag Flag Constants</title>
      <para>Extra tag flags used when registering tags.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.TAG_FLAG_COUNT</methodname></term>
            <listitem><simpara>number of tag flags</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_FLAG_DECODED</methodname></term>
            <listitem><simpara>tag is decoded</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.TAG_FLAG_ENCODED</methodname></term>
            <listitem><simpara>tag is encoded</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_FLAG_META</methodname></term>
            <listitem><simpara>tag is meta data</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_FLAG_UNDEFINED</methodname></term>
            <listitem><simpara>undefined flag</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
        
  <refsect2 id="gst-tag-merge-constants">
    <title>GST Tag Merge Constants</title>
      <para>The different tag merging modes are basically replace, overwrite and append, but they can be seen from 
      two directions. Given two taglists: A - the one that are supplied to gst.tag_setter_merge_tags() or 
      gst.tag_setter_add_tags() and B - the tags already in the element, how are the tags merged? In the table below
       this is shown for the cases that a tag exists in the list (A) or does not exists (!A) and combination thereof.</para>
      <emphasis role="bold">Table 1. merge mode</emphasis>
      <table class="simple">
        <tr><th>merge mode</th><th>A + B</th><th>A + !B</th><th>!A + B</th><th>!A + !B</th></tr>
        <tr><td>REPLACE_ALL</td><td>B</td><td>-</td><td>B</td><td>-</td></tr>
        <tr><td>REPLACE</td><td>B</td><td>A</td><td>B</td><td>-</td></tr>
        <tr><td>APPEND</td><td>A, B</td><td>A</td><td>B</td><td>-</td></tr>
        <tr><td>PREPEND</td><td>B, A</td><td>A</td><td>B</td><td>-</td></tr>
        <tr><td>KEEP</td><td>A</td><td>A</td><td>B</td><td>-</td></tr>
        <tr><td>KEEP_ALL</td><td>A</td><td>A</td><td>-</td><td>-</td></tr>
      </table>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.TAG_MERGE_APPEND</methodname></term>
            <listitem><simpara>append tags</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_MERGE_COUNT</methodname></term>
            <listitem><simpara>the number of merge modes</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.TAG_MERGE_KEEP</methodname></term>
            <listitem><simpara>keep existing tags</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_MERGE_KEEP_ALL</methodname></term>
            <listitem><simpara>keep all existing tags</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_MERGE_PREPEND</methodname></term>
            <listitem><simpara>prepend tags</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_MERGE_REPLACE</methodname></term>
            <listitem><simpara>replace tags</simpara></listitem>
          </varlistentry>
           <varlistentry>
            <term><methodname>gst.TAG_MERGE_REPLACE_ALL</methodname></term>
            <listitem><simpara>replace all tags (clear list and append)</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TAG_MERGE_UNDEFINED</methodname></term>
            <listitem><simpara>undefined merge mode</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-task-constants">
    <title>GST Task Constants</title>
      <para>The different states a task can be in.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.TASK_PAUSED</methodname></term>
            <listitem><simpara>the task is paused</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TASK_STARTED</methodname></term>
            <listitem><simpara>the task is started and running</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TASK_STOPPED</methodname></term>
            <listitem><simpara>the task is stopped</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-type-constants">
    <title>GST Type Constants</title>
      <para></para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.TYPE_ELEMENT_FACTORY</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TYPE_INDEX_FACTORY</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TYPE_TYPE_FIND_FACTORY</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>
  
  <refsect2 id="gst-type-find-constants">
    <title>GST Type Find Constants</title>
      <para>The probability of the typefind function. Higher values have more certainty in doing a reliable typefind.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.TYPE_FIND_LIKELY</methodname></term>
            <listitem><simpara>likely a type was detected</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TYPE_FIND_MAXIMUM</methodname></term>
            <listitem><simpara>very certain a type was detected.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TYPE_FIND_MINIMUM</methodname></term>
            <listitem><simpara>unlikely typefind</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TYPE_FIND_NEARLY_CERTAIN</methodname></term>
            <listitem><simpara>nearly certain that a type was detected</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TYPE_FIND_POSSIBLE</methodname></term>
            <listitem><simpara>possible type detected</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-uri-constants">
    <title>GST URI Type Constants</title>
      <para>The different types of URI direction.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.URI_SINK</methodname></term>
            <listitem><simpara>The URI is a consumer.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.URI_SRC</methodname></term>
            <listitem><simpara>The URI is a producer.</simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.URI_UNKNOWN</methodname></term>
            <listitem><simpara>The URI direction is unknown</simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>

  <refsect2 id="gst-unknown-constants">
    <title>GST Unknown Constants</title>
      <para>These constansts haven't been identified yet.</para>
        <variablelist>
          <varlistentry>
            <term><methodname>gst.PARAM_CONTROLLABLE</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.MSECOND</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
          <varlistentry>
            <term><methodname>gst.TIME_ARGS</methodname></term>
            <listitem><simpara></simpara></listitem>
          </varlistentry>
        </variablelist>
  </refsect2>


</refsect1>
</refentry>

