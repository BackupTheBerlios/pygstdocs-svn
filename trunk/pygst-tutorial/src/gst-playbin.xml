<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refsect1>
  <para>
  A playbin is a highlevel, automatic, audio and video player. You create a playbin object with:
  <synopsis language="python">my_playbin = gst.element_factory_make("playbin", "my-playbin")</synopsis>
  To get information about a playbin run:
  <synopsis>$ gst-inspect-0.10 playbin</synopsis>
  Ok, time for a few examples.
  </para>
  
  <para>
  This first example is just a simple audio player, insert a file with absolute path and it'll play. </para>
  <refsect2 id="example-2.1">
<emphasis role="bold">Example 2.1</emphasis>
  <synopsis language="python">#!/usr/bin/env python

import sys, os
import pygtk, gtk, gobject
import pygst
pygst.require("0.10")
import gst

class GTK_Main:
	
	def __init__(self):
		window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		window.set_title("Audio-Player")
		window.set_default_size(300, -1)
		window.connect("destroy", gtk.main_quit, "WM destroy")
		vbox = gtk.VBox()
		window.add(vbox)
		self.entry = gtk.Entry()
		vbox.pack_start(self.entry, False, True)
		self.button = gtk.Button("Start")
		self.button.connect("clicked", self.start_stop)
		vbox.add(self.button)
		window.show_all()
		
		self.player = gst.element_factory_make("playbin", "player")
		fakesink = gst.element_factory_make("fakesink", "fakesink")
		self.player.set_property("video-sink", fakesink)
		bus = self.player.get_bus()
		bus.add_signal_watch()
		bus.connect("message", self.on_message)
		
	def start_stop(self, w):
		if self.button.get_label() == "Start":
			filepath = self.entry.get_text()
			if os.path.isfile(filepath):
				self.button.set_label("Stop")
				self.player.set_property("uri", "file://" + filepath)
				self.player.set_state(gst.STATE_PLAYING)
		else:
			self.player.set_state(gst.STATE_NULL)
			self.button.set_label("Start")
						
	def on_message(self, bus, message):
		t = message.type
		if t == gst.MESSAGE_EOS:
			self.player.set_state(gst.STATE_NULL)
			self.button.set_label("Start")
		elif t == gst.MESSAGE_ERROR:
			self.player.set_state(gst.STATE_NULL)
			err, debug = message.parse_error()
			print "Error: %s" % err, debug
			self.button.set_label("Start")

GTK_Main()
gtk.gdk.threads_init()
gtk.main()
</synopsis>
</refsect2>
   <para>A playbin plugs both audio and video streams automagically so I've switched the videosink out to a fakesink
   element which is Gstreamer's answer to /dev/null. If you want to enable video playback just comment out the 
   following lines:
  <synopsis language="python">fakesink = gst.element_factory_make("fakesink", "my-fakesink")
self.player.set_property("video-sink", fakesink)
</synopsis>
  </para>

  <para>If you want to show the video output in a specified window you'll have to use the 
   enable_sync_message_emission() method on the bus. Here is an example with the 
   video window embedded in the program.
  </para>
  <refsect2 id="example-2.2">
<emphasis role="bold">Example 2.2</emphasis>
<synopsis language="python">#!/usr/bin/env python

import sys, os
import pygtk, gtk, gobject
import pygst
pygst.require("0.10")
import gst

class GTK_Main:
	
	def __init__(self):
		window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		window.set_title("Video-Player")
		window.set_default_size(500, 400)
		window.connect("destroy", gtk.main_quit, "WM destroy")
		vbox = gtk.VBox()
		window.add(vbox)
		hbox = gtk.HBox()
		vbox.pack_start(hbox, False)
		self.entry = gtk.Entry()
		hbox.add(self.entry)
		self.button = gtk.Button("Start")
		hbox.pack_start(self.button, False)
		self.button.connect("clicked", self.start_stop)
		self.movie_window = gtk.DrawingArea()
		vbox.add(self.movie_window)
		window.show_all()
		
		self.player = gst.element_factory_make("playbin", "player")
		bus = self.player.get_bus()
		bus.add_signal_watch()
		bus.enable_sync_message_emission()
		bus.connect("message", self.on_message)
		bus.connect("sync-message::element", self.on_sync_message)
		
	def start_stop(self, w):
		if self.button.get_label() == "Start":
			filepath = self.entry.get_text()
			if os.path.isfile(filepath):
				self.button.set_label("Stop")
				self.player.set_property("uri", "file://" + filepath)
				self.player.set_state(gst.STATE_PLAYING)
		else:
			self.player.set_state(gst.STATE_NULL)
			self.button.set_label("Start")
						
	def on_message(self, bus, message):
		t = message.type
		if t == gst.MESSAGE_EOS:
			self.player.set_state(gst.STATE_NULL)
			self.button.set_label("Start")
		elif t == gst.MESSAGE_ERROR:
			self.player.set_state(gst.STATE_NULL)
			err, debug = message.parse_error()
			print "Error: %s" % err, debug
			self.button.set_label("Start")
	
	def on_sync_message(self, bus, message):
		if message.structure is None:
			return
		message_name = message.structure.get_name()
		if message_name == "prepare-xwindow-id":
			imagesink = message.src
			imagesink.set_property("force-aspect-ratio", True)
			imagesink.set_xwindow_id(self.movie_window.window.xid)
			
GTK_Main()
gtk.gdk.threads_init()
gtk.main()
</synopsis>
 </refsect2>
<para>And just to make things a little more complicated you can switch the playbins videosink to a
<ulink url="../pygst-reference/class-gstbin.html">gst.Bin</ulink>
with a <ulink url="../pygst-reference/class-gstghostpad.html">gst.GhostPad</ulink> on it. 
Here's an example with a timeoverlay.
</para>
<synopsis language="python">bin = gst.Bin("my-bin")
timeoverlay = gst.element_factory_make("timeoverlay")
bin.add(timeoverlay)
pad = timeoverlay.get_pad("video_sink")
ghostpad = gst.GhostPad("sink", pad)
bin.add_pad(ghostpad)
videosink = gst.element_factory_make("autovideosink")
bin.add(videosink)
gst.element_link_many(timeoverlay, videosink)
self.player.set_property("video-sink", bin)</synopsis>
<para>Add that code to the example above and you'll get a timeoverlay too. We'll talk more about 
ghostpads later.
</para>

<para>On peoples requests we add a CLI example which plays music, just run it with:
</para>
<synopsis>$ python cliplayer.py /path/to/file1.mp3 /path/to/file2.ogg</synopsis>
 <refsect2 id="example-2.3">
<emphasis role="bold">Example 2.3</emphasis>
<synopsis language="python">#!/usr/bin/env python

import sys, os, time, thread
import gobject
import pygst
pygst.require("0.10")
import gst

class CLI_Main:
	
	def __init__(self):
		self.player = gst.element_factory_make("playbin", "player")
		fakesink = gst.element_factory_make("fakesink", "fakesink")
		self.player.set_property("video-sink", fakesink)
		bus = self.player.get_bus()
		bus.add_signal_watch()
		bus.connect("message", self.on_message)

	def on_message(self, bus, message):
		t = message.type
		if t == gst.MESSAGE_EOS:
			self.player.set_state(gst.STATE_NULL)
			self.playmode = False
		elif t == gst.MESSAGE_ERROR:
			self.player.set_state(gst.STATE_NULL)
			err, debug = message.parse_error()
			print "Error: %s" % err, debug
			self.playmode = False

	def start(self):
		for filepath in sys.argv[1:]:
			if os.path.isfile(filepath):
				self.playmode = True
				self.player.set_property("uri", "file://" + filepath)
				self.player.set_state(gst.STATE_PLAYING)
				while self.playmode:
					time.sleep(1)
		
		time.sleep(1)
		loop.quit()

mainclass = CLI_Main()
thread.start_new_thread(mainclass.start, ())
gobject.threads_init()
loop = gobject.MainLoop()
loop.run()
</synopsis>
 </refsect2>
 <para>A playbin implements a <ulink url="../pygst-reference/class-gstpipeline.html">gst.Pipeline</ulink>
 element and that's what the next chapter is going to tell you more about.
</para>
</refsect1>
