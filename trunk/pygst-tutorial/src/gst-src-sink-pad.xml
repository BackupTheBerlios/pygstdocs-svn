<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refsect1>
  <para>
  Hehe, now this isn't so complicated as it may seem at a first glance. A src is an object that is "sending"
  data and a sink is an object that is "recieving" data. These objects connects to each other with pads.  
   Pads could be either "src" or "sink". Most elements have both src and sink pads. IE a mad element 
  looks something like the ASCII figure below:
  </para>
<synopsis>

                                       mad
          ________________________________________________________________
         |                                                                |
         |_______________       _____________________       ______________|
         |               |     |                     |     |              |
 -->-->--| pad name=sink |-->--| internal stuff here |-->--| pad name=src |-->-->--
         |_______________|     |_____________________|     |______________|
         |                                                                |
         |________________________________________________________________|

</synopsis>
<para>And as always if you want to know more about highlevel elements gst-inspect is your friend:</para>
<synopsis>$ gst-inspect-0.10 mad</synopsis>
<para>
There are many different ways to link elements together. In example 3.1 we used the element_link_many() function.
You can also make a complete ready to go pipeline with the parse_launch() function. The pipeline from example 3.1
would be done like this:
<synopsis>
mp3_pipeline = gst.parse_launch("filesrc name=source ! mad name=decoder ! audioconvert name=conv ! alsasink name=sink")
</synopsis>
You can of course also link pads manually with the link() method. Just make sure that you try to link a src-pad
to a sink-pad. No rule though without exceptions. :D A gst.GhostPad should be linked to a pad of the same kind as
it self. We have already showed how a ghostpad works in the addition to example 2.2. A 
<ulink url="../pygst-reference/class-gstbin.html">gst.Bin</ulink> can't link to other 
objects if you don't link a 
<ulink url="../pygst-reference/class-gstghostpad.html">gst.GhostPad</ulink> to an element inside the bin. 
In ASCII style example 2.2 should look something like this:
<synopsis>

                                                   gst.Bin
          _______________________________________________________________________________/\ 
         |                                                                                 \/
         |                                       timeoverlay
         |                 ____________________________________________________________
         |__________      |_______________     _____________________     ______________|
         |          |     |               |   |                     |   |              |
 -->-->--| ghostpad |-->--| pad name=sink |---| internal stuff here |---| pad name=src |-->--
         |__________|     |_______________|   |_____________________|   |______________|
         |                |____________________________________________________________|
         |
         |_______________________________________________________________________________/\
                                                                                           \/
</synopsis>
And the ghostpad above should be created as type "sink"!!!
</para>
<para>Some pads are not always available and are only created when they are in use. Such pads are
called "dynamical pads". The next example will show how to use dynamically created pads with
an oggdemux. The link between the demuxer and the decoder is created with the demuxer_callback()
function which is called whenever a pad is created in the demuxer using the "pad-added" signal.</para>
<emphasis role="bold">Example 4.1</emphasis>
<synopsis>#!/usr/bin/env python

import sys, os
import pygtk, gtk, gobject
import pygst
pygst.require("0.10")
import gst

class GTK_Main:
	
	def __init__(self):
		window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		window.set_title("Vorbis-Player")
		window.set_default_size(400, 300)
		window.connect("destroy", gtk.main_quit, "WM destroy")
		vbox = gtk.VBox()
		window.add(vbox)
		self.entry = gtk.Entry()
		vbox.pack_start(self.entry, False)
		self.button = gtk.Button("Start")
		vbox.add(self.button)
		self.button.connect("clicked", self.start_stop)
		window.show_all()
		
		self.player = gst.Pipeline("player")
		source = gst.element_factory_make("filesrc", "file-source")
		self.player.add(source)
		demuxer = gst.element_factory_make("oggdemux", "demuxer")
		self.player.add(demuxer)
		demuxer.connect("pad-added", self.demuxer_callback)
		self.audio_decoder = gst.element_factory_make("vorbisdec", "vorbis-decoder")
		self.player.add(self.audio_decoder)
		audioconv = gst.element_factory_make("audioconvert", "converter")
		self.player.add(audioconv)
		audiosink = gst.element_factory_make("autoaudiosink", "audio-output")
		self.player.add(audiosink)

		gst.element_link_many(source, demuxer)
		gst.element_link_many(self.audio_decoder, audioconv, audiosink)

		bus = self.player.get_bus()
		bus.add_signal_watch()
		bus.connect("message", self.on_message)
		
	def start_stop(self, w):
		if self.button.get_label() == "Start":
			filepath = self.entry.get_text()
			if os.path.exists(filepath):
				self.button.set_label("Stop")
				self.player.get_by_name("file-source").set_property("location", filepath)
				self.player.set_state(gst.STATE_PLAYING)
		else:
			self.player.set_state(gst.STATE_NULL)
			self.button.set_label("Start")
						
	def on_message(self, bus, message):
		t = message.type
		if t == gst.MESSAGE_EOS:
			self.player.set_state(gst.STATE_NULL)
			self.button.set_label("Start")
		elif t == gst.MESSAGE_ERROR:
			err, debug = message.parse_error()
			print "Error: %s" % err, debug
			self.player.set_state(gst.STATE_NULL)
			self.button.set_label("Start")
	
	def demuxer_callback(self, demuxer, pad):
		adec_pad = self.audio_decoder.get_pad("sink")
		pad.link(adec_pad)
		
GTK_Main()
gtk.gdk.threads_init()
gtk.main()
</synopsis>
<para>Now after reading through these four chapters you could need a break. Happy hacking and stay tuned for
more interesting chapters to come.</para>
</refsect1>


