<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refsect1>
  <para>
  This tutorial is meant to be a quick way to get to know
  more about Gstreamer but it'll take some time to write it though because we don't know it ourselves ... yet. 
  We're usually using GNU/Linux and GTK in the examples but we try to keep the GUI code to an absolute 
  minimum so it should not get in the way. We take for granted that you are at least a fairly descent 
  Python coder. For problems related to the Python language we redirect you over to 
  <ulink url="http://python.org/doc">here</ulink>. :D
  </para>
  
  <para>
  As you may see this tutorial is far from done and we are always looking for new people to join this
  project. If you want to write a chapter just do it and submit it to some of the people having commiting 
  access to the  source. You find us
 <ulink url="http://developer.berlios.de/projects/pygstdocs/">here</ulink>. TIA
  </para>
  
  <para>
  There are also some example coding distributed with the PyGST source which you may browse
  <ulink url="http://webcvs.freedesktop.org/gstreamer/gst-python/examples/">here</ulink>.
  </para>
  
  <para>
  Gstreamer comes with a few handy CLI programs that helps you find and try out what you need in
  a very fast and convenient way. With "gst-inspect" you can track highlevel elements which are
  shipped with the various plugins packages.
  <synopsis>man gst-inspect-0.10</synopsis>
  If you are looking for an element but you don't know its name you can use it with grep. Getting the elements
  that handles ie mp3 is done like this:
  <synopsis>gst-inspect-0.10 | grep mp3</synopsis>
  Playbin is an autoplugger element which usually plays anything you throw at it, if you have 
  the appropriate plugins installed.
  <synopsis>gst-inspect-0.10 playbin</synopsis>
  You can also run pipelines directly in a terminal with "gst-launch":
  <synopsis>man gst-launch-0.10</synopsis>
  For playing a file with playbin:
  <synopsis>gst-launch-0.10 playbin uri=file:///path/to/file.mkv</synopsis>
  It's also possible to link elements together with "!":
  <synopsis>gst-launch-0.10 audiotestsrc ! alsasink</synopsis>
  You may also make different streams in the pipeline:
  <synopsis>gst-launch-0.10 audiotestsrc ! alsasink videotestsrc ! xvimagesink</synopsis>
  If you are using the "name" property you may use the same element more than once. Just put a "." after its name, eg with
  oggmux here.
   <synopsis>gst-launch-0.10 audiotestsrc ! vorbisenc ! oggmux name=mux ! filesink location=file.ogg videotestsrc ! theoraenc ! mux.</synopsis>
  </para>
</refsect1>


